[{"E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\index.js":"1","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\App.js":"2","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\HOC\\routes.jsx":"3","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Auth\\Auth.jsx":"4","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Header\\Header.jsx":"5","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\Chats.jsx":"6","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Chat\\Chat.jsx":"7","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\redux\\Store.js":"8","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\redux\\authReduser.js":"9","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\API\\api.js":"10","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\Main.jsx":"11","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Auth\\Register.jsx":"12","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\validators.js":"13","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Users\\Users.jsx":"14","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Users\\UsersList.jsx":"15","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\redux\\profileReduser.js":"16","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Preloader\\Preloader.jsx":"17","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\ChatsContainer.jsx":"18","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\index.js":"19","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\App.js":"20","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\redux\\Store.js":"21","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\redux\\authReduser.js":"22","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\redux\\profileReduser.js":"23","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\HOC\\routes.jsx":"24","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\Main.jsx":"25","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Preloader\\Preloader.jsx":"26","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Auth\\Register.jsx":"27","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Auth\\Auth.jsx":"28","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\validators.js":"29","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Users\\Users.jsx":"30","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\ChatsContainer.jsx":"31","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Header\\Header.jsx":"32","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chat\\Chat.jsx":"33","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\Chats.jsx":"34","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Users\\UsersList.jsx":"35","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\Search.jsx":"36","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\SingleChat.jsx":"37","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\redux\\groupsReduser.js":"38","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\redux\\messagesReduser.js":"39","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chat\\ChatContainer.jsx":"40","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\Groups.jsx":"41","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\CreateChanel.jsx":"42","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\RightsSetingForm.jsx":"43","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\SingleRightSettings.jsx":"44","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\GroupSetingForm.jsx":"45","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\SingleGroupSettings.jsx":"46","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\AddUsersForm.jsx":"47","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\SingleRightPopup.jsx":"48","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\redux\\searchReduser.js":"49","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\DAL\\api.js":"50","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\CreateGroup.jsx":"51","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\RightsMenu.jsx":"52"},{"size":408,"mtime":1612112648716,"results":"53","hashOfConfig":"54"},{"size":2697,"mtime":1612135805096,"results":"55","hashOfConfig":"54"},{"size":991,"mtime":1612137840528,"results":"56","hashOfConfig":"54"},{"size":4108,"mtime":1612135223057,"results":"57","hashOfConfig":"54"},{"size":666,"mtime":1612129832757,"results":"58","hashOfConfig":"54"},{"size":3904,"mtime":1612121048200,"results":"59","hashOfConfig":"54"},{"size":4506,"mtime":1612120867253,"results":"60","hashOfConfig":"54"},{"size":398,"mtime":1612123793312,"results":"61","hashOfConfig":"54"},{"size":2421,"mtime":1612135127958,"results":"62","hashOfConfig":"54"},{"size":0,"mtime":1612030323256,"results":"63","hashOfConfig":"54"},{"size":678,"mtime":1612137860906,"results":"64","hashOfConfig":"54"},{"size":3796,"mtime":1612119838566,"results":"65","hashOfConfig":"54"},{"size":645,"mtime":1609939464245,"results":"66","hashOfConfig":"54"},{"size":447,"mtime":1612121248000,"results":"67","hashOfConfig":"54"},{"size":107,"mtime":1612120498423,"results":"68","hashOfConfig":"54"},{"size":869,"mtime":1612123754542,"results":"69","hashOfConfig":"54"},{"size":504,"mtime":1612131499422,"results":"70","hashOfConfig":"54"},{"size":187,"mtime":1612137813891,"results":"71","hashOfConfig":"54"},{"size":408,"mtime":1612192223000,"results":"72","hashOfConfig":"73"},{"size":6354,"mtime":1623083760802,"results":"74","hashOfConfig":"73"},{"size":677,"mtime":1622050235568,"results":"75","hashOfConfig":"73"},{"size":2355,"mtime":1612192223000,"results":"76","hashOfConfig":"73"},{"size":837,"mtime":1612192223000,"results":"77","hashOfConfig":"73"},{"size":1210,"mtime":1622075196746,"results":"78","hashOfConfig":"73"},{"size":7203,"mtime":1622730800860,"results":"79","hashOfConfig":"73"},{"size":481,"mtime":1612192223000,"results":"80","hashOfConfig":"73"},{"size":3682,"mtime":1621252832082,"results":"81","hashOfConfig":"73"},{"size":3973,"mtime":1612192223000,"results":"82","hashOfConfig":"73"},{"size":630,"mtime":1612192223000,"results":"83","hashOfConfig":"73"},{"size":1388,"mtime":1622049276592,"results":"84","hashOfConfig":"73"},{"size":1281,"mtime":1622424094720,"results":"85","hashOfConfig":"73"},{"size":2036,"mtime":1622565106811,"results":"86","hashOfConfig":"73"},{"size":8659,"mtime":1622889306302,"results":"87","hashOfConfig":"73"},{"size":6482,"mtime":1622679902701,"results":"88","hashOfConfig":"73"},{"size":7804,"mtime":1622933977766,"results":"89","hashOfConfig":"73"},{"size":437,"mtime":1615662506355,"results":"90","hashOfConfig":"73"},{"size":3079,"mtime":1622709657026,"results":"91","hashOfConfig":"73"},{"size":6140,"mtime":1622726011600,"results":"92","hashOfConfig":"73"},{"size":690,"mtime":1621980589961,"results":"93","hashOfConfig":"73"},{"size":3848,"mtime":1622844373701,"results":"94","hashOfConfig":"73"},{"size":6031,"mtime":1622841476790,"results":"95","hashOfConfig":"73"},{"size":2760,"mtime":1623066655454,"results":"96","hashOfConfig":"73"},{"size":5764,"mtime":1623083565647,"results":"97","hashOfConfig":"73"},{"size":2192,"mtime":1622031533834,"results":"98","hashOfConfig":"73"},{"size":14373,"mtime":1622682391041,"results":"99","hashOfConfig":"73"},{"size":2592,"mtime":1620859012776,"results":"100","hashOfConfig":"73"},{"size":3255,"mtime":1622235821900,"results":"101","hashOfConfig":"73"},{"size":5720,"mtime":1622389246437,"results":"102","hashOfConfig":"73"},{"size":3945,"mtime":1622933870229,"results":"103","hashOfConfig":"73"},{"size":5107,"mtime":1623082967574,"results":"104","hashOfConfig":"73"},{"size":4492,"mtime":1622708962166,"results":"105","hashOfConfig":"73"},{"size":4596,"mtime":1622575295230,"results":"106","hashOfConfig":"73"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"110"},"f1per7",{"filePath":"111","messages":"112","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"110"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"110"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"110"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"110"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"110"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"110"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"110"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"155"},"j4yq09",{"filePath":"156","messages":"157","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"155"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"155"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"155"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"155"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"155"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"155"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"155"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"155"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"155"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"155"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"155"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"155"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"155"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"155"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"155"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"155"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"155"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"155"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"229"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"155"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"155"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"155"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"155"},"E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\index.js",["246"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from '../src/redux/Store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render( \n\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n\n    document.getElementById('root')\n);",["247","248"],"E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\App.js",["249","250","251","252","253","254","255","256","257","258","259","260"],"import axios from 'axios';\nimport { useCallback, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { BrowserRouter, Route, Router, withRouter } from 'react-router-dom';\nimport './App.css';\nimport Auth from './Components/Auth/Auth';\nimport Register from './Components/Auth/Register';\nimport Main from './Components/Main/Main';\nimport Preloader from './Components/Preloader/Preloader';\nimport { useRotes } from './HOC/routes';\nimport { setProfile, setLogin, setLoaded, setToken } from './redux/authReduser'\n\nfunction App(props) {\n\n  let [token, setToken] = useState(props.token)\n\n  useEffect(async () => {\n    const data = JSON.parse(localStorage.getItem('userData'))\n    if (data && data.token) {\n      let req = await axios.get('http://localhost:8001/profile/' + data.id)\n      props.setProfile(data.token, data.id,\n        req.data.name,\n        req.data.email,\n        req.data.contacts,\n        req.data.messages,\n        req.data.invites,\n        req.data.groups\n      )\n    }\n  }, []);\n\n  // useEffect(()=>{\n  //   setToken(props.token)\n  // },[props.token])\n  let routes = useRotes(!!props.token)\n  // if (!props.loaded) return <Preloader/>\n  return <div>\n    <BrowserRouter>\n      {/* {isAuth && <Navbar/>} */}\n      <div className='container'>\n        {routes}\n      </div>\n    </BrowserRouter>\n  </div>\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    loaded: state.auth.loaded,\n    token: state.auth.token,\n    userId: state.auth.userId,\n    // name: state.auth.name,\n    // email: state.auth.email,\n    // contacts: state.auth.contacts,\n    // messages: state.auth.messages,\n    // invites: state.auth.invites,\n    // groups: state.auth.groups\n  }\n}\n\nexport default connect(mapStateToProps, { setProfile, setLogin, setLoaded, setToken })(App);\n // const login = useCallback(( token, id, name, email, contacts, messages, invites, groups) => {\n  //   props.setProfile(token, id, name, email, contacts, messages, invites, groups)\n  //   localStorage.setItem('userData', JSON.stringify({ id: id, token: token }))\n  // }, []);\n\n  // props.setLogin(login)\n\n  // useEffect(async () => {\n  //   const data = JSON.parse(localStorage.getItem('userData'))\n  //   debugger\n  //   if (data && data.token) {\n  //     let req = await axios.get('http://localhost:8001/profile/'+data.id)\n  //     login(data.token, data.userId,\n  //       req.data.name,\n  //       req.data.email,\n  //       req.data.contacts,\n  //       req.data.messages,\n  //       req.data.invites,\n  //       req.data.groups\n  //     )\n  //   }\n  //   props.setLoaded(true)\n  //   debugger\n  // }, [login]);\n\n  // let routes = useRotes(!!props.token)\n  // console.log(props.loaded)\n  // debugger","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\HOC\\routes.jsx",["261"],"E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Auth\\Auth.jsx",["262","263","264"],"import './Auth.module.css';\r\nimport React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { setProfile,setLoaded } from '../../redux/authReduser'\r\nimport axios from 'axios';\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport { required, aol, email, minLength6 } from '../../validators'\r\nimport { connect } from 'react-redux';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        maxWidth: 340,\r\n        margin: '40px auto 0'\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    input: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: 200,\r\n        },\r\n    }\r\n}));\r\n\r\nconst input = ({ input, label, type, name, meta: { touched, error, warning } }) => {\r\n    return (\r\n        <div>\r\n            <TextField\r\n                //error\r\n                id=\"standard-error-helper-text\"\r\n                //label=\"Error\"\r\n                label={label}\r\n                type={type}\r\n                {...input}\r\n            // helperText={touched &&\r\n            //     ((error && { error }) ||\r\n            //         (warning && { warning }))}\r\n            />\r\n        </div>\r\n        // <div className=\"cf\">\r\n        //     <label for={name}>{label}<span className=\"required\">*</span></label>\r\n        //     <input {...input} name={name} type={type} id={name} size=\"35\" />\r\n        //     {touched &&\r\n        //         ((error && <span>{error}</span>) ||\r\n        //             (warning && <span>{warning}</span>))}\r\n        // </div>\r\n    )\r\n}\r\n\r\nfunction AuthForm(props) {\r\n    const { submitting } = props\r\n    const classes = useStyles();\r\n\r\n    return <form onSubmit={props.handleSubmit} className={classes.input}\r\n    >\r\n        <Field\r\n            name=\"email\"\r\n            type=\"email\"\r\n            component={input}\r\n            label=\"Email\"\r\n            validate={[required, email]}\r\n            warn={aol}\r\n        />\r\n\r\n        <Field\r\n            name=\"password\"\r\n            type=\"password\"\r\n            component={input}\r\n            label=\"Пароль\"\r\n            validate={[required, minLength6]}\r\n            warn={aol}\r\n        />\r\n        <div style={{ margin: '22px 0 10px 8px' }}>\r\n            <Button type=\"submit\" disabled={submitting} variant=\"contained\" style={{ marginRight: '8px' }}>Войти</Button>\r\n            <Button variant=\"contained\">\r\n                <NavLink to='/register'>Зарегистрироваться</NavLink>\r\n            </Button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nAuthForm = reduxForm({ form: 'auth' })(AuthForm)\r\n\r\nfunction Auth(props) {\r\n    const classes = useStyles();\r\n    let submit = async (formData) => {\r\n        try {\r\n            let req = await axios.post('http://localhost:8001/login', { ...formData })\r\n            debugger\r\n            props.setProfile(\r\n                req.data.token, \r\n                req.data.userId,\r\n                req.data.name,\r\n                req.data.email,\r\n                req.data.contacts,\r\n                req.data.messages,\r\n                req.data.invites,\r\n                req.data.groups\r\n            )\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                    Вход\r\n                </Typography>\r\n            </CardContent>\r\n\r\n            <AuthForm onSubmit={submit} />\r\n\r\n        </Card>\r\n    );\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        login: state.auth.login,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { setProfile,setLoaded })(withRouter(Auth));\r\n","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Header\\Header.jsx",[],"E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\Chats.jsx",["265","266"],"import { NavLink } from 'react-router-dom';\r\nimport './Chats.css';\r\n\r\nfunction Chats() {\r\n    let contacts=true;\r\n\r\n    return <div className='im_dialogs_col_wrap noselect'>\r\n        <div className='im_dialogs_panel'>\r\n            <div className='im_dialogs_search'>\r\n                <input className=\"form-control im_dialogs_search_field no_outline ng-valid ng-dirty ng-touched ng-empty\"></input>\r\n                <a className=''>\r\n                    <i className=''></i>\r\n                </a>\r\n            </div>\r\n        </div>\r\n        <div className='im_dialogs_col' style={{height:'100vh'}}>\r\n            <div className='im_dialogs_wrap nano has-scrollbar active-scrollbar'>\r\n                <div className='im_dialogs_scrollable_wrap nano-content' style={{right:'-17px'}}>\r\n                    {contacts ? <NavLink to='/users'>Добавить</NavLink>\r\n                    :<ul className='nav nav-pills nav-stacked'>\r\n                        <li className='im_dialog_wrap'> \r\n                            <a className='im_dialog'>\r\n                                <div className='im_dialog_meta pull-right text-right'>\r\n                                    <div className='im_dialog_date'>\r\n                                        12:31 AM\r\n                                    </div>\r\n                                    <span className='im_dialog_badge badge im_dialog_badge_muted'>\r\n                                        1\r\n                                    </span>\r\n                                </div>\r\n                                <div className='im_dialog_photo pull-left peer_photo_init'>\r\n                                    <span className='peer_initials nocopy im_dialog_photo user_bgcolor_5'>\r\n                                        PM\r\n                                    </span>\r\n                                </div>\r\n                                <div className='im_dialog_message_wrap'>\r\n                                    <div className='im_dialog_peer'>\r\n                                        <span className=''>\r\n                                            Влад\r\n                                        </span>\r\n                                    </div>\r\n                                    <div>\r\n                                        <div className=\"im_dialog_message\">\r\n                                            <span>\r\n                                                <span>\r\n                                                    <span className='im_dialog_chat_from_wrap'>\r\n                                                        <span className='im_dialog_chat_from'>\r\n                                                            Вадим\r\n                                                        </span>\r\n                                                        <span>\r\n                                                            :\r\n                                                        </span>\r\n                                                    </span>\r\n                                                </span>\r\n                                            </span>\r\n                                            <span >\r\n                                                <span className='im_short_message_text'>\r\n                                                а, да это просто задание такое))\r\n                                                </span>\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </a>\r\n                        </li>\r\n                    </ul>}\r\n                </div>\r\n                <div className='nano-pane' style={{display: 'block'}}>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Chats;","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Chat\\Chat.jsx",["267","268"],"import './Chat.css';\r\n\r\nfunction Chat() {\r\n    let chosen = true;\r\n    \r\n    return <div className='im_history_col_wrap noselect im_history_loaded'>\r\n        {!chosen ? <div className='im_history_not_selected_wrap'>\r\n            <div className='im_history_not_selected vertical-aligned' style={{ paddingTop: '229px', paddingBottom: '229px' }}>\r\n                Выберите чат для общения\r\n            </div>\r\n        </div>\r\n            : <div className='im_history_selected_wrap'>\r\n                <div className=\"im_history_wrap nano has-scrollbar active-scrollbar\" style={{ height: '481px' }}>\r\n                    <div className='im_history_scrollable_wrap nano-content' style={{ marginRight: '-17px' }}>\r\n                        <div className=''>\r\n                            <div className='im_history im_history_selectable'>\r\n                                <div classNmae=\"im_history_messages im_history_messages_group\">\r\n                                    {/* Loading More */}\r\n                                    <div className='im_history_messages_peer'>\r\n                                        {/* Сообщения */}\r\n                                        <div className='im_history_message_wrap'>\r\n                                            {/* Дата */}\r\n                                            <div class=\"im_message_outer_wrap hasselect\">\r\n\r\n                                                <div class=\"im_message_wrap clearfix\" >\r\n\r\n                                                    <div>\r\n                                                        <i class=\"icon icon-select-tick\"></i>\r\n\r\n                                                        <a class=\"im_message_from_photo pull-left peer_photo_init\"><span class=\"peer_initials nocopy im_message_from_photo user_bgcolor_5\"></span></a>\r\n\r\n                                                        <div class=\"im_message_meta pull-right text-right noselect\">\r\n\r\n                                                            <span class=\"im_message_date clickable\">\r\n                                                                <span class=\"im_message_edited\"></span>\r\n                                                                <span class=\"im_message_date_text nocopy\"></span>\r\n                                                            </span>\r\n                                                        </div>\r\n\r\n                                                        <div class=\"im_message_body\">\r\n\r\n                                                            <span class=\"im_message_author_wrap\">\r\n                                                                <span class=\"copyonly\">[<span>7:08:03 PM</span>] </span><a class=\"im_message_author user_color_5\">Viacheslav Barkov</a><span class=\"copyonly\">:</span><span class=\"im_message_author_admin\" style={{display: 'none'}}></span>\r\n                                                            </span>\r\n\r\n                                                            <div my-message-body=\"historyMessage\">\r\n                                                                <div class=\"im_message_text\" dir=\"auto\">Всем добрый вечер. Немного спама.</div>\r\n                                                                {/* <div class=\"im_message_media\" style=\"display: none;\"></div>\r\n                                                                <div class=\"im_message_sign\" style=\"display: none;\"></div>\r\n                                                                <div class=\"im_message_keyboard\" style=\"display: none;\"></div> */}\r\n                                                            </div>\r\n\r\n                                                        </div>\r\n\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                            </div>\r\n                                        </div>\r\n                                        {/* Cообщение */}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=''>\r\n\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Chat;","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\redux\\Store.js",["269"],"import authReduser from \"./authReduser\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport profileReduser from \"./profileReduser\";\r\n\r\nconst { createStore, combineReducers, applyMiddleware } = require(\"redux\");\r\n\r\nlet redusers= combineReducers({\r\n    auth: authReduser,\r\n    profile: profileReduser,\r\n    form: formReducer,\r\n});\r\n\r\nlet store=createStore(redusers);\r\n\r\nexport default store","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\redux\\authReduser.js",["270","271"],"const LOGIN = 'authReuser/LOGIN';\r\nconst LOGOUT = 'authReuser/LOGOUT';\r\nconst SET_LOADED = 'authReuser/SET-LOADED';\r\nconst SET_TOKEN = 'authReuser/SET-TOKEN';\r\nconst SET_USER_ID = 'authReuser/SET-LOADED';\r\nconst SET_LOGIN = 'authReuser/SET-LOGIN';\r\nconst SET_PROFILE_DATA = 'authReuser/SET_PROFILE_DATA';\r\n\r\nlet init = {\r\n    token: null,\r\n    id: null,\r\n    loaded: false,\r\n    isAuth: false,\r\n    login: () => { },\r\n    //Данные\r\n    name: null,\r\n    email: null,\r\n    contacts: null,\r\n    messages: null,\r\n    invites: null,\r\n    groups: null\r\n};\r\n\r\nconst authReduser = (state = init, action) => {\r\n    switch (action.type) {\r\n        // case LOGIN:\r\n        //     localStorage.setItem('userData', JSON.stringify({ userId: action.id, token: action.jwtToken }))\r\n        //     return { ...state, userId: action.id, token: action.jwtToken}\r\n        case LOGOUT:\r\n            localStorage.removeItem('userData')\r\n            return { ...state, token: null, userId: null }\r\n        case SET_LOADED:\r\n            return { ...state, loaded: action.loaded }\r\n        case SET_PROFILE_DATA:\r\n            localStorage.setItem('userData', JSON.stringify({ id: action.id, token: action.token }))\r\n            return {\r\n                ...state,\r\n                name: action.name,\r\n                email: action.email,\r\n                contacts: action.contacts,\r\n                messages: action.messages,\r\n                invites: action.invites,\r\n                groups: action.groups,\r\n                token: action.token,\r\n                id:action.id\r\n            }\r\n        case SET_TOKEN:\r\n            return { ...state, token: action.token }\r\n        // case SET_USER_ID:\r\n        //     return { ...state, userId: action.userId }\r\n        case SET_LOGIN:\r\n            return { ...state, login: action.login }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setProfile = (token, id, name, email, contacts, messages, invites, groups) => (\r\n    { type: SET_PROFILE_DATA, token, id, name, email, contacts, messages, invites, groups }\r\n);\r\nexport const logout = () => ({ type: LOGOUT, });\r\nexport const setLoaded = (loaded) => ({ type: SET_LOADED, loaded });\r\nexport const setToken = (token) => ({ type: SET_TOKEN, token });\r\n// export const setUserId = (userId) => ({ type: SET_USER_ID, userId });\r\nexport const setLogin = (login) => ({ type: SET_LOGIN, login });\r\n\r\n\r\nexport default authReduser","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\API\\api.js",[],["272","273"],"E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\Main.jsx",[],"E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Auth\\Register.jsx",["274","275","276","277","278"],"import './Auth.module.css';\r\nimport React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport axios from 'axios';\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport { required, aol, email, minLength6 } from '../../validators'\r\nimport { connect } from 'react-redux';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        maxWidth: 340,\r\n        margin: '40px auto 0'\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    input: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: 200,\r\n        },\r\n    }\r\n}));\r\n\r\nconst input = ({ input, label, type, name, meta: { touched, error, warning } }) => {\r\n    return (\r\n        <div>\r\n            <TextField\r\n                //error\r\n                id=\"standard-error-helper-text\"\r\n                //label=\"Error\"\r\n                label={label}\r\n                type={type}\r\n                {...input}\r\n            // helperText={touched &&\r\n            //     ((error && { error }) ||\r\n            //         (warning && { warning }))}\r\n            />\r\n        </div>\r\n        // <div className=\"cf\">\r\n        //     <label for={name}>{label}<span className=\"required\">*</span></label>\r\n        //     <input {...input} name={name} type={type} id={name} size=\"35\" />\r\n        //     {touched &&\r\n        //         ((error && <span>{error}</span>) ||\r\n        //             (warning && <span>{warning}</span>))}\r\n        // </div>\r\n    )\r\n}\r\n\r\nfunction RegisterForm(props) {\r\n    const { submitting } = props\r\n    const classes = useStyles();\r\n\r\n    return <form onSubmit={props.handleSubmit} className={classes.input}>\r\n        <Field\r\n            name=\"name\"\r\n            type=\"text\"\r\n            component={input}\r\n            label=\"Имя\"\r\n            validate={[required]}\r\n            warn={aol}\r\n        />\r\n        <Field\r\n            name=\"email\"\r\n            type=\"email\"\r\n            component={input}\r\n            label=\"Email\"\r\n            validate={[required, email]}\r\n            warn={aol}\r\n        />\r\n\r\n        <Field\r\n            name=\"password\"\r\n            type=\"password\"\r\n            component={input}\r\n            label=\"Пароль\"\r\n            validate={[required, minLength6]}\r\n            warn={aol}\r\n        />\r\n        <div style={{ margin: '22px 0 10px 8px' }}>\r\n            <Button type=\"submit\" disabled={submitting} variant=\"contained\" style={{ marginRight: '8px' }}>Зарегистрироваться</Button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nRegisterForm = reduxForm({ form: 'register' })(RegisterForm)\r\n\r\nfunction Register(props) {\r\n    const classes = useStyles();\r\n    let submit = async (formData) => {\r\n        try {\r\n            debugger\r\n            let req = await axios.post('http://localhost:8001/register', { ...formData })\r\n            props.history.goBack()\r\n        } catch (e) { }\r\n    }\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                    Вход\r\n                </Typography>\r\n            </CardContent>\r\n\r\n            <RegisterForm onSubmit={submit} />\r\n\r\n        </Card>\r\n    );\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        login: state.auth.login,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {})(withRouter(Register));","E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\validators.js",[],"E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Users\\Users.jsx",[],"E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Users\\UsersList.jsx",[],"E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\redux\\profileReduser.js",[],"E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Preloader\\Preloader.jsx",[],"E:\\Web\\React\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\ChatsContainer.jsx",["279"],"C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\index.js",["280"],["281","282"],"C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\App.js",["283","284","285","286","287","288","289","290","291","292","293","294","295","296","297"],"C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\redux\\Store.js",[],"C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\redux\\authReduser.js",["298","299"],"const LOGIN = 'authReuser/LOGIN';\nconst LOGOUT = 'authReuser/LOGOUT';\nconst SET_LOADED = 'authReuser/SET-LOADED';\nconst SET_TOKEN = 'authReuser/SET-TOKEN';\nconst SET_USER_ID = 'authReuser/SET-LOADED';\nconst SET_LOGIN = 'authReuser/SET-LOGIN';\nconst SET_PROFILE_DATA = 'authReuser/SET_PROFILE_DATA';\n\nlet init = {\n    token: null,\n    id: null,\n    loaded: false,\n    isAuth: false,\n    login: () => { },\n    //Данные\n    name: null,\n    email: null,\n    contacts: null,\n    messages: null,\n    invites: null,\n    groups: null\n};\n\nconst authReduser = (state = init, action) => {\n    switch (action.type) {\n        // case LOGIN:\n        //     localStorage.setItem('userData', JSON.stringify({ userId: action.id, token: action.jwtToken }))\n        //     return { ...state, userId: action.id, token: action.jwtToken}\n        case LOGOUT:\n            localStorage.removeItem('userData')\n            return { ...state, token: null, userId: null }\n        case SET_LOADED:\n            return { ...state, loaded: action.loaded }\n        case SET_PROFILE_DATA:\n            localStorage.setItem('userData', JSON.stringify({ id: action.id, token: action.token }))\n            return {\n                ...state,\n                name: action.name,\n                email: action.email,\n                contacts: action.contacts,\n                messages: action.messages,\n                invites: action.invites,\n                groups: action.groups,\n                token: action.token,\n                id:action.id\n            }\n        case SET_TOKEN:\n            return { ...state, token: action.token }\n        // case SET_USER_ID:\n        //     return { ...state, userId: action.userId }\n        case SET_LOGIN:\n            return { ...state, login: action.login }\n        default:\n            return state\n    }\n}\nexport const setProfile = (token, id, name, email, contacts, messages, invites, groups) => (\n    { type: SET_PROFILE_DATA, token, id, name, email, contacts, messages, invites, groups }\n);\nexport const logout = () => ({ type: LOGOUT, });\nexport const setLoaded = (loaded) => ({ type: SET_LOADED, loaded });\nexport const setToken = (token) => ({ type: SET_TOKEN, token });\n// export const setUserId = (userId) => ({ type: SET_USER_ID, userId });\nexport const setLogin = (login) => ({ type: SET_LOGIN, login });\n\n\nexport default authReduser","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\redux\\profileReduser.js",[],"C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\HOC\\routes.jsx",["300"],"import React from 'react'\nimport {Redirect, Route, Switch} from 'react-router-dom'\nimport Auth from '../Components/Auth/Auth'\nimport Register from '../Components/Auth/Register'\nimport Main from '../Components/Main/Main'\nimport Users from '../Components/Users/Users'\nimport Preloader from '../Components/Preloader/Preloader';\n// import CreateGroup from '../Components/Create/CreateGroup'\n\nexport const useRotes=(isAuth)=>{\n if (isAuth){\n    return (<Switch>\n        <Route path='/chat/:groupId?/:chanelId?' exact>\n            <Main/>\n        </Route>\n        <Route path='/users' exact>\n            <Users/>\n        </Route>\n        <Route path='/create_group' exact>\n        <Main/>\n        </Route>\n        <Route path='/create_chanel' exact>\n        <Main/>\n        </Route>\n        <Redirect to='/chat/:groupId?/:chanelId?'/>\n    </Switch>)\n }\n\n return <Switch>\n     <Route path='/' exact>\n        <Auth/>\n     </Route>\n     <Route path='/register' exact>\n        <Register/>\n     </Route>\n     <Redirect to='/'/>\n </Switch>\n\n}\n// let mapStateToProps = (state) => {\n//     return {\n//       loaded: state.auth.loaded,\n//     }\n//   }\n  \n//   export default connect(mapStateToProps, { setLoaded })(useRotes);","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\Main.jsx",["301","302","303","304","305","306","307"],"import { connect } from 'react-redux';\nimport ChatContainer from '../Chat/ChatContainer';\nimport RightsSetingForm from './RightsSetingForm';\nimport Chats from '../Chats/ChatsContainer';\nimport Groups from '../Chats/Groups';\nimport Header from '../Header/Header';\nimport './Main.css';\nimport { SetRightsForm, toggleAddUsersForm, setGroupSettingsForm, setSimpleRoles, setHistoryPopup } from '../../redux/groupsReduser'\nimport GroupSetingForm from './GroupSetingForm';\nimport { withRouter } from 'react-router';\nimport CreateGroup from '../Chats/CreateGroup';\nimport CreateChanel from '../Chats/CreateChanel';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Preloader from '../Preloader/Preloader';\nimport { groupAPI } from '../../DAL/api';\n\nfunction Main(props) {\n    let [usersList, setUsersList] = useState(null);\n    let [partnerArr, setPartner] = useState([]);\n    let [roles, setRoles] = useState([]);\n    useEffect(async () => {\n        let req = await axios.get('http://localhost:8001/friends/' + props.author);\n        setUsersList(req.data)\n    }, [])\n    // useEffect(async () => {\n    //     let res=[];\n    //     if (props.selectedGroup) res = await axios.get('http://localhost:8001/roles_simple/' + props.selectedGroup._id)\n    //     debugger\n    //     props.setSimpleRoles(res.data)\n    // }, [props.location])\n    let addUser = (e, name) => {\n        let role = {\n            role: JSON.parse(localStorage.getItem('role')).role === 'admin'\n                || JSON.parse(localStorage.getItem('role')).role === 'owner' ? 'partner' : 'invited',\n            user_name: name,\n            group_id: props.selectedGroup._id\n        }\n        if (partnerArr.some(item => item === name)) {\n            let index = partnerArr.indexOf(name);\n            partnerArr.splice(index, 1);\n            setPartner(partnerArr)\n            setRoles(roles.splice(index, 1))\n            e.target.style.backgroundColor = ''\n        } else {\n            setPartner([...partnerArr, name])\n            setRoles([...roles, role])\n            e.target.style.backgroundColor = 'blueviolet'\n        }\n        console.log(partnerArr)\n        console.log(roles)\n    }\n    let sendUsers = async () => {\n        let body;\n        if (JSON.parse(localStorage.getItem('role')).role === 'admin'\n            || JSON.parse(localStorage.getItem('role')).role === 'owner') {\n            body = {\n                new_parters: partnerArr,\n                roles,\n                role: \"partner\"\n            };\n        } else {\n            body = {\n                new_parters: partnerArr,\n                roles,\n                role: 'invited'\n            };\n        }\n        await groupAPI.addUser(props.selectedGroup._id, body)\n        props.toggleAddUsersForm(!props.addUsersForm)\n    }\n\n    return <div>\n        <div className='Header'>\n            <Header />\n        </div>\n        <div className='im_page_wrap clearfix'>\n            {props.rightsSetingForm ?\n                <RightsSetingForm />\n                // <GroupSetingForm {...props} />\n                : props.groupForm ? <GroupSetingForm {...props} />\n                    : <div className='im_page_split clearfix'>\n                        <Groups />\n\n                        {props.location.pathname == '/create_group'\n                            ? <CreateGroup {...props} />\n                            : props.location.pathname == '/create_chanel'\n                                ? <CreateChanel {...props} />\n                                : <>\n                                    <Chats />\n                                    <ChatContainer />\n                                </>}\n\n                    </div>}\n        </div>\n        <div className='popups'>\n\n            <div className={\"add_users_form\" + \" \" + (props.addUsersForm ? 'overlay_target' : '')} >\n                <div className=\"popup\">\n                    <h2>Пригласить пользователей в группу</h2>\n                    <a className=\"close\">&times;</a>\n                    <div className=\"content\">\n                        {!usersList ? <Preloader />\n                            : <ul className='user_list'>\n                                {usersList.friends.map(item => {\n                                    if (item.initiator._id === props.author) {\n                                        return <li className='user_item'\n                                            onClick={(e) => { addUser(e, item.partner.name) }}>\n                                            {item.partner.name}\n                                        </li>\n                                    }\n                                    if (item.partner._id === props.author) {\n                                        return <li className='user_item'\n                                            onClick={(e) => { addUser(e, item.initiator.name) }}>\n                                            {item.initiator.name}\n                                        </li>\n                                    }\n                                }\n                                )}\n                            </ul>}\n                        <button disabled={partnerArr.length === 0 ? true : false}\n                            onClick={sendUsers}\n                        >ОК</button>\n                    </div>\n                </div>\n            </div>\n\n            {/* <div className={\"history_form\" + \" \" + (props.addUsersForm ? 'overlay_target' : '')} >\n                <div className=\"popup\">\n                    <h2>Файлы</h2>\n                    <a className=\"close\">&times;</a>\n                    <div className=\"content\">\n                        {!props.history ? <Preloader />\n                            : <ul className='user_list'>\n                                {props.history.map(item => {\n                                    return <li className='user_item'>\n                                        <a href={'http://localhost:8001/file/' + item.file.destination + item.file.filename}\n                                            download\n                                        ></a>\n                                    </li>\n                                }\n                                )}\n                            </ul>\n                        }\n                        <button disabled={partnerArr.length === 0 ? true : false}\n                            onClick={sendUsers}\n                        >ОК</button>\n                    </div>\n                </div>\n            </div> */}\n\n        </div>\n    </div>\n}\nlet mapStateToProps = (state) => {\n    return {\n        author: state.auth.id,\n        rightsSetingForm: state.groups.rightsSetingForm,\n        selectedGroup: state.groups.selectedGroup,\n        selectedChanel: state.groups.selectedChanel,\n        groupForm: state.groups.groupForm,\n        addUsersForm: state.groups.addUsersForm,\n        SimpleRoles: state.groups.SimpleRoles,\n        Chanelhistory: state.groups.history,\n        historyPopup: state.groups.historyPopup,\n    }\n}\nexport default connect(mapStateToProps, { SetRightsForm, toggleAddUsersForm, setGroupSettingsForm, setSimpleRoles, setHistoryPopup })(withRouter(Main));","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Preloader\\Preloader.jsx",[],"C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Auth\\Register.jsx",["308","309","310","311","312"],"import './Auth.module.css';\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\n\nimport axios from 'axios';\nimport { Field, reduxForm } from 'redux-form'\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport { required, aol, email, minLength6 } from '../../validators'\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: 340,\n        margin: '40px auto 0'\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    input: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: 200,\n        },\n    }\n}));\n\nconst input = ({ input, label, type, name, meta: { touched, error, warning } }) => {\n    return (\n        <div>\n            <TextField\n                //error\n                id=\"standard-error-helper-text\"\n                //label=\"Error\"\n                label={label}\n                type={type}\n                {...input}\n            // helperText={touched &&\n            //     ((error && { error }) ||\n            //         (warning && { warning }))}\n            />\n        </div>\n        // <div className=\"cf\">\n        //     <label for={name}>{label}<span className=\"required\">*</span></label>\n        //     <input {...input} name={name} type={type} id={name} size=\"35\" />\n        //     {touched &&\n        //         ((error && <span>{error}</span>) ||\n        //             (warning && <span>{warning}</span>))}\n        // </div>\n    )\n}\n\nfunction RegisterForm(props) {\n    const { submitting } = props\n    const classes = useStyles();\n\n    return <form onSubmit={props.handleSubmit} className={classes.input}>\n        <Field\n            name=\"name\"\n            type=\"text\"\n            component={input}\n            label=\"Имя\"\n            validate={[required]}\n            warn={aol}\n        />\n        <Field\n            name=\"email\"\n            type=\"email\"\n            component={input}\n            label=\"Email\"\n            validate={[required, email]}\n            warn={aol}\n        />\n\n        <Field\n            name=\"password\"\n            type=\"password\"\n            component={input}\n            label=\"Пароль\"\n            validate={[required, minLength6]}\n            warn={aol}\n        />\n        <div style={{ margin: '22px 0 10px 8px' }}>\n            <Button type=\"submit\" disabled={submitting} variant=\"contained\" style={{ marginRight: '8px' }}>Зарегистрироваться</Button>\n        </div>\n    </form>\n}\n\nRegisterForm = reduxForm({ form: 'register' })(RegisterForm)\n\nfunction Register(props) {\n    const classes = useStyles();\n    let submit = async (formData) => {\n        try {\n            debugger\n            let req = await axios.post('http://localhost:8001/register', { ...formData })\n            props.history.goBack()\n        } catch (e) { }\n    }\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n                <Typography variant=\"h5\" component=\"h2\">\n                   Регистрация\n                </Typography>\n            </CardContent>\n\n            <RegisterForm onSubmit={submit} />\n\n        </Card>\n    );\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        login: state.auth.login,\n    }\n}\n\nexport default connect(mapStateToProps, {})(withRouter(Register));","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Auth\\Auth.jsx",["313","314","315"],"import './Auth.module.css';\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport { setProfile,setLoaded } from '../../redux/authReduser'\nimport axios from 'axios';\nimport { Field, reduxForm } from 'redux-form'\nimport { NavLink, withRouter } from \"react-router-dom\";\nimport { required, aol, email, minLength6 } from '../../validators'\nimport { connect } from 'react-redux';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        maxWidth: 340,\n        margin: '40px auto 0'\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    input: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: 200,\n        },\n    }\n}));\n\nconst input = ({ input, label, type, name, meta: { touched, error, warning } }) => {\n    return (\n        <div>\n            <TextField\n                //error\n                id=\"standard-error-helper-text\"\n                //label=\"Error\"\n                label={label}\n                type={type}\n                {...input}\n            // helperText={touched &&\n            //     ((error && { error }) ||\n            //         (warning && { warning }))}\n            />\n        </div>\n        // <div className=\"cf\">\n        //     <label for={name}>{label}<span className=\"required\">*</span></label>\n        //     <input {...input} name={name} type={type} id={name} size=\"35\" />\n        //     {touched &&\n        //         ((error && <span>{error}</span>) ||\n        //             (warning && <span>{warning}</span>))}\n        // </div>\n    )\n}\n\nfunction AuthForm(props) {\n    const { submitting } = props\n    const classes = useStyles();\n\n    return <form onSubmit={props.handleSubmit} className={classes.input}\n    >\n        <Field\n            name=\"email\"\n            type=\"email\"\n            component={input}\n            label=\"Email\"\n            validate={[required, email]}\n            warn={aol}\n        />\n\n        <Field\n            name=\"password\"\n            type=\"password\"\n            component={input}\n            label=\"Пароль\"\n            validate={[required, minLength6]}\n            warn={aol}\n        />\n        <div style={{ margin: '22px 0 10px 8px' }}>\n            <Button type=\"submit\" disabled={submitting} variant=\"contained\" style={{ marginRight: '8px' }}>Войти</Button>\n            <Button variant=\"contained\">\n                <NavLink to='/register'>Зарегистрироваться</NavLink>\n            </Button>\n        </div>\n    </form>\n}\n\nAuthForm = reduxForm({ form: 'auth' })(AuthForm)\n\nfunction Auth(props) {\n    const classes = useStyles();\n    let submit = async (formData) => {\n        try {\n            let req = await axios.post('http://localhost:8001/login', { ...formData })\n            debugger\n            props.setProfile(\n                req.data.token, \n                req.data.userId,\n                req.data.name,\n                req.data.email,\n                req.data.contacts,\n                req.data.messages,\n                req.data.invites,\n                req.data.groups\n            )\n        } catch (e) {\n            console.log(e)\n        }\n    }\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n                <Typography variant=\"h5\" component=\"h2\">\n                    Вход\n                </Typography>\n            </CardContent>\n\n            <AuthForm onSubmit={submit} />\n\n        </Card>\n    );\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        login: state.auth.login,\n    }\n}\n\nexport default connect(mapStateToProps, { setProfile,setLoaded })(withRouter(Auth));\n","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\validators.js",[],"C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Users\\Users.jsx",["316"],"import { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport Chats from '../Chats/Chats';\nimport Header from '../Header/Header';\nimport './Users.css';\nimport UsersList from './UsersList';\nimport {\n    setSearched, toggleList, loadList, setReqNumber, setSearchedArr, SearchChange,\n    searchThunk,\n    CloseListThunk\n  } from '../../redux/searchReduser';\n\nfunction Users(props) {\n\n    return <div>\n    <div className='Header'>\n        <Header />\n    </div>\n    <div className='im_page_wrap clearfix'>\n        <div className='im_page_split clearfix'>\n            {/* <Chats/> */}\n            <UsersList {...props}/>\n        </div>\n    </div>\n</div>\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        author: state.auth.id,\n        rightsSetingForm: state.groups.rightsSetingForm,\n        selectedGroup: state.groups.selectedGroup,\n        selectedChanel: state.groups.selectedChanel,\n        groupForm: state.groups.groupForm,\n        newSearchText: state.search.newSearchText,\n        searched: state.search.searched,\n        isClosed: state.search.isClosed,\n        isListLoading: state.search.isListLoading,\n        requestNumber: state.search.requestNumber,\n    }\n}\nexport default connect(mapStateToProps, {\n    setSearched, toggleList, loadList, setReqNumber, setSearchedArr, SearchChange,\n    searchThunk,\n    CloseListThunk  })(withRouter(Users));","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\ChatsContainer.jsx",["317","318","319","320"],"import Chats from './Chats';\nimport './Chats.css';\nimport { connect } from 'react-redux';\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport {setSimpleRoles,setGroups,SetRightsForm,setChanels,setSelectedChanel,setGroupSettingsForm,defineRole,toggleAddUsersForm} from '../../redux/groupsReduser'\nimport Preloader from '../Preloader/Preloader';\nimport { withRouter } from 'react-router';\n\nfunction ChatsContainer(props) {\n    if (props.match.params.groupId) {return <Chats {...props} />}\n    else {return <div>\n        {/* Выберете группу */}\n        </div>}\n\n    // if (!props.groups) return <Preloader/>\n    return <Chats {...props} />\n}\nlet mapStateToProps = (state) => {\n    return {\n        author: state.auth.id,\n        name: state.auth.name,\n        groups: state.groups.groups,\n        rights:state.groups.rights,\n        selectedGroup: state.groups.selectedGroup,\n        chanels:state.groups.chanels,\n        role: state.groups.role,\n        addUsersForm: state.groups.addUsersForm,\n        // rightsSetingForm: state.groups.rightsSetingForm\n    }\n}\nexport default connect(mapStateToProps, {toggleAddUsersForm,setGroups,SetRightsForm,setChanels,setSelectedChanel,setGroupSettingsForm,defineRole,setSimpleRoles})(withRouter(ChatsContainer));","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Header\\Header.jsx",["321"],"import s from './Header.module.css';\nimport { logout } from '../../redux/authReduser'\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { useState } from 'react';\nimport {setHistoryPopup,setHistory} from '../../redux/groupsReduser'\nimport axios from 'axios';\n\nfunction Header(props) {\n    let [menu, setMenu] = useState(false)\n    let seeHistory=async()=>{\n        let res= await axios('http://localhost:8001/history/'+props.selectedChanel._id)\n        props.setHistory(res.data)\n        props.setHistoryPopup(true)\n    }\n    return <div className='clearfix'>\n        <header className={s.header}>\n            <div className={s.header__logo} onClick={() => { setMenu(!menu) }}>\n                <div className={s.user_name}>\n                    {props.name}\n                </div>\n                <ul className={s.menu} style={menu ? { display: 'block' } : null}>\n                    <li>\n                        <NavLink to='/users'>Контакты</NavLink>\n                    </li>\n                    <li>\n                        <NavLink to='/create_group'>Создать группу</NavLink>\n                    </li>\n                    <li>\n                        <span onClick={() => { props.logout() }}>Выйти</span>\n                    </li>\n                </ul>\n            </div>\n            {/* <div className='for_chanel_name'>\n                {!props.selectedChanel ? null\n                    : <div>\n                        <div>\n                            {props.selectedChanel.name}\n                        </div>\n                        <div onClick={seeHistory}>\n                            История\n                        </div>\n                    </div>\n                }\n            </div> */}\n        </header>\n    </div>\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        name: state.auth.name,\n        selectedChanel: state.groups.selectedChanel,\n    }\n}\n\nexport default connect(mapStateToProps, { logout,setHistoryPopup,setHistory })(Header);","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chat\\Chat.jsx",["322","323","324","325"],"import './Chat.css';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { Button } from '@material-ui/core';\nimport { messagesAPI } from '../../DAL/api';\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\nimport {Acces, socket} from '../../App'\n\nfunction Chat(props) {\n    console.log(props.onlineGroupUsers)\n    let [text, setText] = useState('');\n    let rights = props.selectedChanel.rights;\n    let [filesArr, setFilesArr] = useState([]);\n\n    let sendMessage = async () => {\n        let formData = new FormData();\n        formData.append('text', text)\n        formData.append('user', props.author)\n        formData.append('chat', props.selectedChanel._id)\n        filesArr.forEach(function (file) {\n            formData.append('files', file);\n        });\n\n        let message = await messagesAPI.sendMessage(props.selectedChanel._id, formData)\n        props.pushMessage(message)\n        for (let user of props.onlineGroupUsers) {\n\n            socket.emit(\"send message\", {\n                content: {\n                    chanel: props.selectedChanel,\n                    group: props.selectedGroup,\n                    message: message\n                },\n                to: user.userID,\n            });\n        }\n        socket.on(\"chat message\", ({ content, from }) => {\n            console.log(content, from)\n        });\n\n    };\n    return <div className='im_history_col_wrap noselect im_history_loaded'>\n        {!props.selected ? <div className='im_history_not_selected_wrap'>\n            <div className='im_history_not_selected vertical-aligned' style={{ paddingTop: '229px', paddingBottom: '229px' }}>\n                Выберите чат для общения\n            </div>\n        </div>\n            : <div className='im_history_selected_wrap'>\n                <div className=\"im_history_wrap nano has-scrollbar active-scrollbar\">\n                    <div className='im_history_scrollable_wrap nano-content' style={{ marginRight: '-17px' }}>\n                        <div className=''>\n                            <div className='im_history im_history_selectable'>\n                                <div classNmae=\"im_history_messages im_history_messages_group\">\n                                    {/* Loading More */}\n                                    <div className='im_history_messages_peer'>\n                                        {/* Сообщения */}\n                                        <div className='im_history_message_wrap'>\n                                            {/* Дата */}\n                                            <div class=\"im_message_outer_wrap hasselect\">\n\n                                                <div class=\"im_message_wrap clearfix\" >\n\n                                                    <div>\n                                                        <i class=\"icon icon-select-tick\"></i>\n\n                                                        <a class=\"im_message_from_photo pull-left peer_photo_init\"><span class=\"peer_initials nocopy im_message_from_photo user_bgcolor_5\"></span></a>\n\n                                                        <div class=\"im_message_meta pull-right text-right noselect\">\n\n                                                            <span class=\"im_message_date clickable\">\n                                                                <span class=\"im_message_edited\"></span>\n                                                                <span class=\"im_message_date_text nocopy\"></span>\n                                                            </span>\n                                                        </div>\n                                                        {/* <div>\n                                                            {!props.selectedChanel\n                                                                ? <Preloader />\n                                                                : props.selectedChanel.name\n                                                            }\n                                                        </div> */}\n                                                        {props.messages.map(item => <div class=\"im_message_body\">\n\n                                                            <span className='message_name'>{item.user.name}</span>\n\n                                                            <div className=\"historyMessage\">\n                                                                <div class=\"im_message_text\" dir=\"auto\">{item.text}</div>\n                                                            </div>\n                                                            {\n                                                                item.files.length === 0 ? null\n                                                                    : <div>\n                                                                        {item.files.map(item => <div>\n                                                                            <a href={'http://localhost:8001/file/' + item.file.destination + item.file.filename}\n                                                                                download\n                                                                            >\n                                                                                {item.file.originalname}\n                                                                            </a>\n                                                                        </div>)}\n                                                                    </div>\n                                                            }\n\n                                                        </div>)}\n\n                                                    </div>\n                                                </div>\n\n                                            </div>\n                                        </div>\n                                        {/* Cообщение */}\n                                    </div>\n                                </div>\n                            </div>\n                            <div>\n\n                            </div>\n                        </div>\n                    </div>\n                    <div className=''>\n\n                    </div>\n                </div>\n                {/* {props.Acces(props.selectedChanel.canWrite,props.selectedGroup,props.name) ? */}\n                {!Acces(props.selectedChanel.canWrite, props.name)\n                ?<div className='im_history_not_selected vertical-aligned' style={{ paddingTop: '129px', paddingBottom: '229px', borderTop: '1px solid' }}>Вы не можете отправлять сообщения</div>\n                :<div className='send_message_form'>\n                    <div className='files_list'>\n                        {\n                            filesArr.length == 0 ? null\n                                : filesArr.map(item => <div className='fileArr'>\n                                    <InsertDriveFileIcon className='fileIcon' />\n                                    <span className='filename'>{item.name}</span>\n                                </div>)\n                        }\n                    </div>\n                    <textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\"\n                        value={text}\n                        onChange={(e) => { setText(e.target.value) }}\n                        className='textarea'\n                    ></textarea>\n                    <div className='send_btn'>\n                        <div>\n                            <Button variant=\"contained\" color=\"primary\" className='send_btn' onClick={sendMessage}>\n                                Отправить\n                            </Button>\n                        </div>\n                        {!Acces(props.selectedChanel.canSendFile, props.name)?null:<div>\n                            <input type='file' id=\"file\" className=\"inputfile\" name=\"file\"\n                                multiple\n                                onChange={(e) => {\n                                    console.log(e.target.files[0])\n                                    setFilesArr([...filesArr, e.target.files[0]])\n                                }}\n                            // className='send_btn'\n                            ></input>\n                            <label for=\"file\">Прикрепить <br /> файл</label>\n                        </div>}\n                    </div>\n                </div>}\n        {/* // :null} */}\n            </div>\n        }\n    </div>\n}\n\nexport default Chat;","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\Chats.jsx",["326","327","328","329","330","331","332","333","334","335","336"],"import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Preloader from '../Preloader/Preloader';\nimport AddUsersForm from './AddUsersForm';\nimport './Chats.css';\nimport CreateChanel from './CreateChanel';\nimport Search from './Search';\nimport SingleChat from './SingleChat';\nimport { chatAPI, rolesAPI } from '../../DAL/api';\n\nfunction Chats(props) {\n    let [group, setGroup] = useState(props.selectedGroup)\n    useEffect(async () => {\n        if (props.selectedGroup) {\n            let req = await chatAPI.getChanels(props.name, props.selectedGroup.name, props.match.params.groupId);\n            props.setChanels(req.data.chanels)\n            localStorage.setItem('right_keys', JSON.stringify(req.data[props.selectedGroup.name]))\n        }\n    }, [props.selectedGroup])\n\n    useEffect(async () => {\n        let role = await rolesAPI.defineRole(props.name, props.match.params.groupId);\n        localStorage.setItem('role', JSON.stringify(role))\n    }, [props.match.params.groupId])\n    useEffect(async () => {\n        let role = await axios.get('http://localhost:8001/role_define/' + props.name + '/' + props.match.params.groupId);\n        localStorage.setItem('role', JSON.stringify(role.data))\n    }, [props.match.params.groupId])\n    let toggleMenu = (e) => {\n        e.preventDefault()\n        e.target.nextElementSibling.classList.toggle('open_menu')\n    }\n    return (\n        <div className='im_dialogs_col_wrap noselect'>\n\n            {/* <Search /> */}\n            <div className='group_logo' onClick={(e)=>{toggleMenu(e)}}>Чаты</div>\n            <div className='group-contextmenu'>\n                {!props.selectedGroup ? <Preloader /> :\n                    !JSON.parse(localStorage.getItem('role')) ? null :\n                        JSON.parse(localStorage.getItem('role')).role === 'admin'\n                            || JSON.parse(localStorage.getItem('role')).role === 'owner'\n                            || JSON.parse(localStorage.getItem('role')).role === 'moderator'\n                            ? <NavLink to='/create_chanel'>Создать чат</NavLink>\n                            : null}\n            </div>\n            <div className='im_dialogs_col' style={{ height: '100vh' }}>\n                <div className='im_dialogs_wrap nano has-scrollbar active-scrollbar'>\n\n                    <div className='im_dialogs_scrollable_wrap nano-content' style={{ right: '-17px' }}>\n\n                        <div>\n                            {/* <div>\n\n                                {!JSON.parse(localStorage.getItem('role')) ? null :\n                                    JSON.parse(localStorage.getItem('role')).role === 'admin'\n                                    ||JSON.parse(localStorage.getItem('role')).role === 'owner'\n                                        ? <div onClick={() => { props.setGroupSettingsForm(true) }}>Настроить должности</div>\n                                        : null} */}\n\n                            {/* {!props.selectedGroup ? <Preloader /> :\n                                    !JSON.parse(localStorage.getItem('role')) ? null :\n                                        JSON.parse(localStorage.getItem('role')).role === 'admin'\n                                        ||JSON.parse(localStorage.getItem('role')).role === 'owner'\n                                        ||JSON.parse(localStorage.getItem('role')).role === 'moderator'\n                                            ? <NavLink to='/create_chanel'>Создать чат</NavLink>\n                                            // <CreateChanel selectedGroup={props.selectedGroup}\n                                            //     SetRightsForm={props.SetRightsForm}\n                                            //     author={props.author}\n                                            // //    rightsSetingForm={props.rightsSetingForm}\n                                            // />\n                                            : null} */}\n\n                            {/*   {!JSON.parse(localStorage.getItem('role')) ? null :\n                                    JSON.parse(localStorage.getItem('role')).role === 'admin'\n                                    ||JSON.parse(localStorage.getItem('role')).role === 'owner'\n                                        ? <AddUsersForm\n                                            title='Пригласить пользователей'\n                                            selectedGroup={props.selectedGroup}\n                                            role={\"admin\"}\n                                            chanels={props.chanels}\n                                            addUsersForm={props.addUsersForm}\n                                            toggleAddUsersForm={props.toggleAddUsersForm} />\n                                        : JSON.parse(localStorage.getItem('role')).role === 'moderator'\n                                            ? <AddUsersForm\n                                                title='Пригласить визитеров'\n                                                selectedGroup={props.selectedGroup}\n                                                role={\"moderator\"}\n                                                chanels={props.chanels}\n                                                toggleAddUsersForm={props.toggleAddUsersForm} />\n                                            : null}\n                            </div> */}\n                        </div>\n                        <ul className='nav nav-pills nav-stacked'>\n                            {!props.chanels ? <Preloader />\n                                : props.chanels.map(item =>\n                                    <SingleChat\n                                        groupId={props.match.params.groupId}\n                                        chanel={item}\n                                        name={item.name}\n                                        SetRightsForm={props.SetRightsForm}\n                                        setSelectedChanel={props.setSelectedChanel}\n                                        author={props.author}\n                                    />)}\n                        </ul>\n\n                    </div>\n                    <div className='nano-pane' style={{ display: 'block' }}>\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Chats;","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Users\\UsersList.jsx",["337","338","339","340","341"],"import { AppBar, Box, Button, Input, makeStyles, Tab, Tabs, Typography } from '@material-ui/core';\nimport axios from 'axios';\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Preloader from '../Preloader/Preloader';\nimport './Users.css';\nimport PropTypes from 'prop-types';\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        width: '500px',\n        marginTop: '30px',\n        // backgroundColor: theme.palette.background.paper,\n    },\n}));\n\n\nfunction UsersList(props) {\n\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    let [usersList, setUsersList] = useState(null);\n    let [searched, setSearched] = useState(props.searched);\n\n    let searchInput = React.createRef();\n    useEffect(async () => {\n        let req = await axios.get('http://localhost:8001/friends/' + props.author)\n        setUsersList(req.data)\n    }, [])\n\n    useEffect(() => {\n        if (searched.requestNumber < props.searched.requestNumber || props.searched.requestNumber === 0)\n            setSearched(props.searched)\n    }, [props.searched])\n    let makeInvite = async (partner) => {\n        await axios.post('http://localhost:8001/make_invite', {\n            initiator: props.author,\n            partner,\n        })\n    }\n    let stopWait=async(inviteId,answer)=>{\n        await axios.put('http://localhost:8001/frendship/'+ inviteId, {\n            waiting: answer,\n        })\n    }\n    return <div style={{ height: '100vh' }}>\n        <div className='form_wrapp'>\n        <form action=\"#\" className='searching-form'>\n            <h3>Найти и отправить приглошение</h3>\n            <input className=\"text-search\" type=\"text\" value={props.newSearchText}\n                onChange={(e) => { \n                    debugger\n                    e.preventDefault()\n                    props.searchThunk(searchInput.current.value, props.requestNumber,props.author) \n                }}\n                ref={searchInput}\n                name=\"s\"\n                placeholder=\"Искать здесь...\" />\n            {\n                props.newSearchText !== ''\n                    ? <NavLink to={\"/search/\" + props.newSearchText} onClick={() => {\n                        props.CloseListThunk()\n                        props.SearchChange('')\n                    }}>\n                        <Button variant=\"contained\" color=\"primary\">Найти</Button>\n                        {/* <input type=\"submit\" className=\"submit-search\" value=\"\" /> */}\n                    </NavLink>\n                    : <Button disabled='true' variant=\"contained\" color=\"primary\">Найти</Button>\n                    // <input type=\"submit\" disabled='true' className=\"submit-search\" value=\"\" />\n            }\n            {props.isListLoading ? <div className='preloader'>\n                <Preloader />\n            </div>\n                :\n                <ul className=\"collection\">\n                    {\n                        (props.isClosed && !searched.request) ? null :\n                            searched.request.map((item) => {\n\n                                return <li className=\"collection-item\"\n                                    onClick={() => {\n                                        makeInvite(item._id)\n                                        props.SearchChange('')\n                                        props.CloseListThunk()\n                                    }}>\n                                    {/* <NavLink to={`/post/${item.title}`} */}\n                                        {/* //className=\"collection-item\" */}\n                                       {/* > */}\n                                    {item.name}\n                                    {/* </NavLink> */}\n                                </li>\n                            })\n                    }\n                    {\n                        (!searched.request || searched.request.length === 0) ? null :\n                            <li className=\"collection-item\">\n                                <NavLink to={\"/search/\" + props.newSearchText} onClick={() => {\n                                    props.CloseListThunk()\n                                    props.SearchChange('')\n                                }}>\n                                    Все результаты\n              </NavLink>\n                            </li>\n                    }\n                </ul>\n            }\n        </form>\n        <div className={classes.root}>\n            <AppBar position=\"static\" color='black' backdtound='#fff' boxShadow='none' style={{ boxShadow:'none'}}>\n                <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\">\n                    <Tab label=\"Контакты\" {...a11yProps(0)} />\n                    <Tab label=\"Приглошения\" {...a11yProps(1)} />\n                    <Tab label=\"Ожидания\" {...a11yProps(2)} />\n                </Tabs>\n            </AppBar>\n            <TabPanel value={value} index={0}>\n                {\n                    !usersList\n                        ? <Preloader />\n                        : usersList.friends.map(item => {\n                            if (item.initiator._id === props.author) {\n                                return <div>\n                                    {item.partner.name}\n                                </div>\n                            }\n                            if (item.partner._id === props.author) {\n                                return <div>\n                                    {item.initiator.name}\n                                </div>\n                            }\n                        })\n                }\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n                {\n                    !usersList\n                        ? <Preloader />\n                        : usersList.invites.map(item =>\n                            <div>\n                                <div>\n                                {item.initiator.name}\n                                </div>\n                                <button onClick={()=>{stopWait(item._id,false)}}>Принять</button>\n                                <button \n                                // onClick={()=>{stopWait(item._id,false)}}\n                                >Отклонить</button>\n                            </div>\n                        )\n                }\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n            {\n                    !usersList\n                        ? <Preloader />\n                        : usersList.waitings.map(item =>\n                            <div>\n                                {item.partner.name}\n                            </div>\n                        )\n                }\n      </TabPanel>\n        </div>\n        </div>\n    </div>\n}\n\nexport default UsersList","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\Search.jsx",["342"],"import './Chats.css';\r\n\r\nfunction Search() {\r\n\r\n    return  <div className='im_dialogs_panel'>\r\n            <div className='im_dialogs_search'>\r\n                <input className=\"form-control im_dialogs_search_field no_outline ng-valid ng-dirty ng-touched ng-empty\"></input>\r\n                <a className=''>\r\n                    <i className=''></i>\r\n                </a>\r\n            </div>\r\n        </div>\r\n}\r\n\r\nexport default Search;","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\SingleChat.jsx",["343","344","345","346","347"],"import { socket } from '../../App';\r\nimport { io } from \"socket.io-client\";\r\nimport './Chats.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction SingleChat(props) {\r\n    let selectChat = () => {\r\n    }\r\n    return <NavLink to={'/chat/' + props.groupId + '/' + props.chanel._id} activeClassName='active_chat' onClick={selectChat}>\r\n        <li className='im_dialog_wrap'>\r\n            {/* <a className='im_dialog'> */}\r\n                <div className='im_dialog_meta pull-right text-right'>\r\n                    {/* <div className='im_dialog_date'>\r\n                        12:31 AM\r\n                                    </div>\r\n                    <span className='im_dialog_badge badge im_dialog_badge_muted'>\r\n                        1\r\n                                    </span> */}\r\n                </div>\r\n                {/* <div className='im_dialog_photo pull-left peer_photo_init'>\r\n                    <span className='peer_initials nocopy im_dialog_photo user_bgcolor_5'> </span>\r\n                </div> */}\r\n                <div className='im_dialog_message_wrap'>\r\n                    <div className='im_dialog_peer'>\r\n                        <span className=''>\r\n                            {props.chanel.name}\r\n                        </span>\r\n                    </div>\r\n                    {JSON.parse(localStorage.getItem('role')).role === 'admin'\r\n                        || JSON.parse(localStorage.getItem('role')).role === 'owner'\r\n                        || JSON.parse(localStorage.getItem('role')).role === 'moderator' && props.chanel.author._id == props.author\r\n                        ? <div onClick={() => {\r\n                            props.setSelectedChanel(props.chanel)\r\n                            props.SetRightsForm('existing_chanel')\r\n                        }}>\r\n                            Настроить\r\n                        </div>\r\n                        : null}\r\n                    <div>\r\n                        <div className=\"im_dialog_message\">\r\n                            {/* <span>\r\n                            <span>\r\n                                <span className='im_dialog_chat_from_wrap'>\r\n                                    <span className='im_dialog_chat_from'>\r\n                                        Вадим\r\n                                                        </span>\r\n                                    <span>\r\n                                        :\r\n                                                        </span>\r\n                                </span>\r\n                            </span>\r\n                        </span>\r\n                        <span >\r\n                            <span className='im_short_message_text'>\r\n                                а, да это просто задание такое))\r\n                                                </span>\r\n                        </span> */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            {/* </a> */}\r\n        </li>\r\n    </NavLink>\r\n}\r\n\r\nexport default SingleChat;","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\redux\\groupsReduser.js",["348"],"const SET_GROUPS = 'groupsReuser/SET_GROUPS';\r\nconst SET_SELECTED = 'groupsReuser/SET_SELECTED';\r\nconst SET_SELECTED_GROUP = 'groupsReuser/SET_SELECTED_GROUP';\r\nconst SET_ONLINE_GROUP_USERS = 'groupsReuser/SET_ONLINE_GROUP_USERS';\r\nconst DELETE_ONLINE_GROUP_USER = 'groupsReuser/DELETE_ONLINE_GROUP_USER';\r\nconst SET_RIGHTS_FORM = 'groupsReuser/SET_RIGHTS_FORM';\r\nconst SET_CHANELS = 'groupsReuser/SET_CHANELS';\r\nconst SET_SELECTED_CHANEL = 'groupsReuser/SET_SELECTED_CHANEL';\r\nconst GROUP_FORM = 'groupsReuser/GROUP_FORM';\r\nconst ROLE = 'groupsReuser/ROLE';\r\nconst ADD_USERS_FORM = 'groupsReuser/ADD_USERS_FORM';\r\nconst HISTORY_POPUP = 'groupsReuser/HISTORY_POPUP';\r\nconst SET_HISTORY = 'groupsReuser/SET_HISTORY';\r\n\r\nlet init = {\r\n    selected: false,\r\n    groups: null,\r\n    selectedGroup: null,\r\n    selectedChanel: null,\r\n    onlineGroupUsers: [],\r\n    chanels: null,\r\n    rightsSetingForm: null,\r\n    groupForm: null,\r\n    role: null,\r\n    addUsersForm: false,\r\n    SimpleRoles: null,\r\n    history: null,\r\n    historyPopup: false,\r\n};\r\n\r\nconst groupsReuser = (state = init, action) => {\r\n    switch (action.type) {\r\n        case SET_GROUPS:\r\n            return { ...state, groups: action.groups }\r\n        case SET_SELECTED:\r\n            return { ...state, selected: action.selected }\r\n        case SET_SELECTED_GROUP:\r\n            window.selectedGroup = action.selectedGroup\r\n            return { ...state, selectedGroup: action.selectedGroup }\r\n        case SET_SELECTED_CHANEL:\r\n            window.selectedChanel = action.selectedChanel\r\n            return { ...state, selectedChanel: action.selectedChanel }\r\n        case SET_RIGHTS_FORM:\r\n            return { ...state, rightsSetingForm: action.rightsSetingForm }\r\n        case SET_CHANELS:\r\n            return { ...state, chanels: action.chanels }\r\n        case GROUP_FORM:\r\n            return { ...state, groupForm: action.groupForm }\r\n        case ADD_USERS_FORM:\r\n            return { ...state, addUsersForm: action.addUsersForm }\r\n        case \"lll\":\r\n            return { ...state, SimpleRoles: action.SimpleRoles }\r\n        case HISTORY_POPUP:\r\n            return { ...state, historyPopup: action.historyPopup }\r\n        case SET_HISTORY:\r\n            return { ...state, history: action.history }\r\n        case SET_ONLINE_GROUP_USERS:\r\n            // let prev = state.onlineGroupUsers;\r\n            // let act = action.onlineGroupUsers;\r\n            // if (act.length == 1) {\r\n            //     for (let user of prev) {\r\n            //         debugger\r\n            //         if (user.username == act.username) return {\r\n            //             ...state,\r\n            //             onlineGroupUsers: [...prev]\r\n            //         }\r\n            //     }\r\n            // }\r\n            return {\r\n                ...state,\r\n                onlineGroupUsers: [...state.onlineGroupUsers, ...action.onlineGroupUsers]\r\n            }\r\n        case DELETE_ONLINE_GROUP_USER:\r\n            let arr = [...state.onlineGroupUsers];\r\n            let index = arr.find(item => item.username == action.disconnectedGroupUser.username);\r\n            if (index) arr\r\n                .splice(arr\r\n                    .indexOf(index), 1)\r\n            return {\r\n                ...state,\r\n                onlineGroupUsers: arr\r\n            }\r\n        case ROLE:\r\n            // let role;\r\n            // outer:for (let key in action.group){\r\n            //     if(typeof action.group[key]==='object'){\r\n            //         for(let i=0;i<action.group[key].length;i++){\r\n            //             if (action.group[key][i]==action.name){\r\n            //                 debugger\r\n            //                 role=key\r\n            //                 break outer\r\n            //             }\r\n            //         }\r\n            //     }\r\n            // }\r\n            return { ...state, role: action.role }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setGroups = (groups) => ({ type: SET_GROUPS, groups });\r\nexport const setSelected = (selected) => ({ type: SET_SELECTED, selected });\r\nexport const setSelectedGroup = (selectedGroup) => ({ type: SET_SELECTED_GROUP, selectedGroup });\r\nexport const setOnlineGroupUsers = (onlineGroupUsers) => ({ type: SET_ONLINE_GROUP_USERS, onlineGroupUsers });\r\nexport const deleteOnlineGroupUsers = (disconnectedGroupUser) => ({ type: DELETE_ONLINE_GROUP_USER, disconnectedGroupUser });\r\nexport const SetRightsForm = (rightsSetingForm) => ({ type: SET_RIGHTS_FORM, rightsSetingForm });\r\nexport const setChanels = (chanels) => ({ type: SET_CHANELS, chanels });\r\nexport const setSelectedChanel = (selectedChanel) => ({ type: SET_SELECTED_CHANEL, selectedChanel });\r\nexport const setGroupSettingsForm = (groupForm) => ({ type: GROUP_FORM, groupForm });\r\nexport const defineRole = (role) => ({ type: ROLE, role });\r\nexport const toggleAddUsersForm = (addUsersForm) => ({ type: ADD_USERS_FORM, addUsersForm });\r\nexport const setSimpleRoles = (SimpleRoles) => ({ type: \"lll\", SimpleRoles });\r\nexport const setHistory = (history) => ({ type: SET_HISTORY, history });\r\nexport const setHistoryPopup = (historyPopup) => ({ type: HISTORY_POPUP, historyPopup });\r\n\r\n// export const Acces = (right,group,name) =>\r\n//     async (dispatch) => {\r\n//         let inList;\r\n//     inList = right.list.some(item => item == name)\r\n//     debugger\r\n//     if (group.author.name==name) return true\r\n//     if (right.hightRoleList.some(item => item == name)) return true\r\n//     if ((right.whitelisted && inList) || (!right.whitelisted && !inList)) return true\r\n//     if ((!right.whitelisted && inList) || (right.whitelisted && !inList)) return false\r\n//     }\r\n\r\n// export let Acces = (right,group,name) => {\r\n//     let inList;\r\n//     inList = right.list.some(item => item == name)\r\n//     debugger\r\n//     if (group.author.name==name) return true\r\n//     if (right.hightRoleList.some(item => item == name)) return true\r\n//     if ((right.whitelisted && inList) || (!right.whitelisted && !inList)) return true\r\n//     if ((!right.whitelisted && inList) || (right.whitelisted && !inList)) return false\r\n// }\r\n\r\nexport default groupsReuser","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\redux\\messagesReduser.js",[],"C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chat\\ChatContainer.jsx",["349","350","351"],"import Chat from './Chat';\nimport { connect } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { setMessages,pushMessage } from '../../redux/messagesReduser'\nimport { setSelectedGroup, setSelected, setOnlineGroupUsers, setSelectedChanel } from '../../redux/groupsReduser'\nimport { withRouter } from 'react-router';\nimport { socket } from '../../App';\nimport { messagesAPI } from '../../DAL/api';\nimport {Acces} from '../../App'\n\nfunction ChatContainer(props) {\n\n    let [accesed, setAccesed] = useState(null);\n    useEffect(async () => {\n        let chanelId = props.match.params.chanelId;\n        if (chanelId) {\n            props.setSelected(true)\n            console.log(props.selected)\n            let ChatReq = await axios.get('http://localhost:8001/single_chanel/' + chanelId);\n            props.setSelectedChanel(ChatReq.data)\n            console.log('ChatReq.data', ChatReq.data)\n            let a = Acces(ChatReq.data.canSee, props.name)\n            setAccesed(Acces(ChatReq.data.canSee, props.name))\n            // setAccesed(JSON.parse(localStorage.getItem('right_keys'))[ChatReq.data.name].canSee)\n            if (JSON.parse(localStorage.getItem('right_keys'))[ChatReq.data.name].canSee) {\n\n                !ChatReq.data.canSee.prevelegion\n                    ? socket.emit('selectChat', { users: ChatReq.data.canSee.list})\n                    : ChatReq.data.canSee.whitelisted\n                        ? socket.emit('selectChat', { users: ChatReq.data.canSee.list})\n                        : socket.emit('selectChat', {\n                            users: [props.selectedGroup.author.name,...props.selectedGroup.partners.filter(\n                                item => !ChatReq.data.canSee.list.some(list_item => list_item === item)\n                            )]\n                        })\n\n                socket.on(\"users\", (users) => {\n                    users.forEach((user) => {\n                        user.self = user.userID === socket.id;\n                        console.log(user);\n                    });\n                    props.setOnlineGroupUsers(users)\n                    console.log(props.onlineGroupUsers)\n                    console.log('Пользователи получены')\n\n                });\n                // socket.on(\"user connected\", (user) => {\n                //     console.log(user, 'conected');\n                //     props.setOnlineGroupUsers([user])\n                //     console.log(props.onlineGroupUsers)\n                // });\n                let MesReq = await messagesAPI.getMessages(chanelId);\n                props.setMessages(MesReq)\n            }\n        }\n    }, [props.match.params.chanelId])\n\n    if (!props.selectedChanel) {\n        return (\n            <div className='im_history_not_selected vertical-aligned' style={{ paddingTop: '229px', paddingBottom: '229px' }}>\n                Выберите чат для общения\n            </div>\n        )\n    }\n\n    if (props.selectedChanel && !accesed) {\n        debugger\n        return (\n        <div className='im_history_not_selected vertical-aligned' style={{ paddingTop: '229px', paddingBottom: '229px' }}>\n            Вы не можете посещать данный канал\n        </div>\n    )}\n    return <Chat {...props} />\n}\nlet mapStateToProps = (state) => {\n    return {\n        author: state.auth.id,\n        name: state.auth.name,\n        selected: state.groups.selected,\n        selectedGroup: state.groups.selectedGroup,\n        messages: state.messages.messages,\n        onlineGroupUsers: state.groups.onlineGroupUsers,\n        selectedChanel: state.groups.selectedChanel,\n    }\n}\nexport default connect(mapStateToProps, { setMessages, setSelectedGroup, setSelected, setOnlineGroupUsers, setSelectedChanel,pushMessage })(withRouter(ChatContainer));","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\Groups.jsx",["352","353","354","355"],"import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Preloader from '../Preloader/Preloader';\r\nimport './Chats.css';\r\nimport { setGroups, SetRightsForm, setSelectedGroup, defineRole, setGroupSettingsForm, toggleAddUsersForm } from '../../redux/groupsReduser'\r\nimport { groupAPI } from '../../DAL/api';\r\nimport AddUsersForm from './AddUsersForm';\r\n\r\n\r\nfunction Groups(props) {\r\n    useEffect(async () => {\r\n        let req = await groupAPI.getGroups(props.name)\r\n        props.setGroups(req)\r\n    }, [])\r\n    let toggleMenu = (e) => {\r\n        e.preventDefault()\r\n        e.target.nextElementSibling.classList.toggle('open_menu')\r\n    }\r\n    // document.className('group-contextmenu-item').onClick(e=>e.classList.toggle('open_menu'))\r\n    // let [groups,setGroups]=useState(null);\r\n    return (\r\n        <div className='im_groups_col_wrap noselect'>\r\n            <div className='group_logo'>Группы</div>\r\n            <ul className='nav nav-pills nav-stacked'>\r\n                {!props.groups ? <Preloader />\r\n                    : props.groups.map(item =>\r\n                        <NavLink\r\n                            to={\"/chat/\" + item._id}\r\n                            className=\"group_link\"\r\n                            activeClassName='active_chat'\r\n                        >\r\n                            <li className=\"group_item\"\r\n                                onClick={() => {\r\n                                    props.setSelectedGroup(item)\r\n                                }}\r\n                            >\r\n                                <div onContextMenu={(e) => { toggleMenu(e) }}>\r\n                                    {item.name}\r\n                                </div>\r\n\r\n                                <div className='group-contextmenu'>\r\n                                    <div className='group-contextmenu-item'\r\n                                        onClick={(e) => { e.target.parentNode.classList.toggle('open_menu') }}>\r\n                                        {!JSON.parse(localStorage.getItem('role')) ? null :\r\n                                            JSON.parse(localStorage.getItem('role')).role === 'admin'\r\n                                                || JSON.parse(localStorage.getItem('role')).role === 'owner'\r\n                                                ? <div onClick={() => { props.setGroupSettingsForm(true) }}>Настроить должности</div>\r\n                                                : null}\r\n                                    </div>\r\n\r\n                                    {/* <CreateGroup author={props.author} name={props.name} /> */}\r\n                                    {/* <div className='group-contextmenu-item'\r\n                                    onClick={(e)=>{e.target.parentNode.classList.toggle('open_menu')}}>\r\n                                        {!JSON.parse(localStorage.getItem('role')) ? null :\r\n                                            JSON.parse(localStorage.getItem('role')).role === 'admin'\r\n                                                || JSON.parse(localStorage.getItem('role')).role === 'owner'\r\n                                                || JSON.parse(localStorage.getItem('role')).role === 'moderator'\r\n                                                ? <NavLink to={'/create_chanel/'+item._id}>Создать чат</NavLink>\r\n                                                : null} \r\n                                    </div>*/}\r\n                                    <div className='group-contextmenu-item'\r\n                                        onClick={(e) => { e.target.parentNode.classList.toggle('open_menu') }}>\r\n                                        {!JSON.parse(localStorage.getItem('role')) ? null :\r\n                                            JSON.parse(localStorage.getItem('role')).role === 'admin'\r\n                                                || JSON.parse(localStorage.getItem('role')).role === 'owner'\r\n                                                ? <AddUsersForm\r\n                                                    title='Пригласить пользователей'\r\n                                                    selectedGroup={props.selectedGroup}\r\n                                                    role={\"admin\"}\r\n                                                    chanels={props.chanels}\r\n                                                    addUsersForm={props.addUsersForm}\r\n                                                    toggleAddUsersForm={props.toggleAddUsersForm} />\r\n                                                : JSON.parse(localStorage.getItem('role')).role === 'moderator'\r\n                                                    ? <AddUsersForm\r\n                                                        title='Пригласить визитеров'\r\n                                                        selectedGroup={props.selectedGroup}\r\n                                                        role={\"moderator\"}\r\n                                                        chanels={props.chanels}\r\n                                                        toggleAddUsersForm={props.toggleAddUsersForm} />\r\n                                                    : null}\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n                        </NavLink>)}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        author: state.auth.id,\r\n        name: state.auth.name,\r\n        groups: state.groups.groups,\r\n        rights: state.groups.rights,\r\n        selectedGroup: state.groups.selectedGroup,\r\n        // rightsSetingForm: state.groups.rightsSetingForm\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { setGroups, SetRightsForm, setSelectedGroup, defineRole, setGroupSettingsForm, toggleAddUsersForm })(Groups);","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\CreateChanel.jsx",["356","357","358"],"C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\RightsSetingForm.jsx",["359","360","361","362","363","364","365"],"C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\SingleRightSettings.jsx",["366","367","368","369","370","371"],"import axios from 'axios';\r\nimport SingleRightPopup from './SingleRightPopup';\r\n\r\nfunction SingleRightSettings(props) {\r\n    // let [list, setList] = useState([])\r\n    let arr = props.right.list;\r\n\r\n    let popup = (e) => {\r\n        if (e.target.className == 'button') e.target.parentNode.nextElementSibling.classList.add('overlay_target')\r\n        if (e.target.classList[0] == 'overlay' || e.target.className == 'close') e.target.closest('.overlay').classList.toggle('overlay_target')\r\n    }\r\n    let createList = (e, name) => {\r\n        if (arr.some(item => item === name)) {\r\n            arr.splice(arr.indexOf(name), 1)\r\n            // setList(list.splice(list.indexOf(name),1))\r\n            e.target.style.backgroundColor = ''\r\n            // e.target.classList.toggle('.chosen_item')\r\n        } else {\r\n            arr.push(name)\r\n            // setList([...list,name])\r\n            // e.target.classList.toggle('.chosen_item')\r\n            e.target.style.backgroundColor = 'blueviolet'\r\n        }\r\n        console.log(arr)\r\n    }\r\n    let sendList = (rightId, whitelisted) => {\r\n        if (!props.right.prevelegion) {\r\n            debugger\r\n            axios.put('http://localhost:8001/right/update/' + rightId, { list: arr, prevelegion: true, whitelisted })\r\n        } else {\r\n            axios.put('http://localhost:8001/right/update/' + rightId, { list: arr })\r\n        }\r\n    }\r\n    return <li className='right_item'>\r\n        <div>{props.title}</div>\r\n        {!props.right.prevelegion\r\n            ? <SingleRightPopup {...props}\r\n                WLtitle='Назначить пользователей'\r\n                BLtitle='Запретить пользователей' />\r\n            : props.right.whitelisted\r\n                ? <SingleRightPopup {...props}\r\n                    WLtitle='Именить белый список'\r\n                    BLtitle='Назначить черный список' />\r\n\r\n                : <SingleRightPopup {...props}\r\n                    WLtitle='Назначить белый список'\r\n                    BLtitle='Изменить черный список' />\r\n        }\r\n    </li>\r\n}\r\n\r\nexport default SingleRightSettings;","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\GroupSetingForm.jsx",["372","373","374"],"import { SetRightsForm } from '../../redux/groupsReduser'\r\nimport { connect } from 'react-redux';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { groupAPI, rolesAPI } from '../../DAL/api';\r\n\r\nfunction GroupSetingForm(props) {\r\n    let [roled, setRoled] = useState(null)\r\n    let [roledSimple, setRoledSimple] = useState(null)\r\n    let [rename, setRename] = useState(false)\r\n    let [groupName, setGroupName] = useState(props.selectedGroup.name);\r\n\r\n    let chanel;\r\n    if (props.rightsSetingForm === 'existing_chanel') {\r\n        debugger\r\n        chanel = props.selectedChanel\r\n    }\r\n    useEffect(async () => {\r\n        let res\r\n        if (props.groupForm) {\r\n            res = await rolesAPI.getAllRoles(props.selectedGroup._id)\r\n            setRoled(res)\r\n        }\r\n        if (props.rightsSetingForm) {\r\n            res = rolesAPI.getSimpleRoles(props.selectedGroup._id)\r\n            setRoledSimple(res)\r\n        }\r\n    }, [])\r\n\r\n    let toggleMenu = (e) => {\r\n        debugger\r\n        e.target.nextElementSibling.classList.toggle('open_menu')\r\n    }\r\n\r\n    let changeRole = async (name, role) => {\r\n        debugger\r\n        await rolesAPI.changeRole(name, props.selectedGroup._id, { role })\r\n        let res = await rolesAPI.getAllRoles(props.selectedGroup._id)\r\n        setRoled(res)\r\n    }\r\n    let deleteUser = async (name) => {\r\n        if (JSON.parse(localStorage.getItem('role')).role === 'admin'\r\n            || JSON.parse(localStorage.getItem('role')).role === 'owner') {\r\n            await groupAPI.deleteUser(name, props.selectedGroup._id)\r\n            let res = await axios.get('http://localhost:8001/roles_all/' + props.selectedGroup._id)\r\n            setRoled(res)\r\n        }\r\n    }\r\n    let renameGroup = async (newName) => {\r\n        await groupAPI.renameGroup(props.selectedGroup._id, { name: newName })\r\n        setRename(!rename)\r\n    }\r\n\r\n    return <div style={{ height: '100vh' }}>\r\n        <div style={{ margin: '10px' }}>\r\n            <span onClick={() => { props.setGroupSettingsForm(false) }}\r\n                className='close'\r\n            >Закрыть</span>\r\n        </div>\r\n        <div className='settings'>\r\n            <div>\r\n                <span>Группа под названием:</span>\r\n                {\r\n                    (!rename)\r\n                        ? <span>\r\n                            <span onDoubleClick={() => { setRename(!rename) }}>{props.selectedGroup.name}</span>\r\n                        </span>\r\n                        : <span>\r\n                            <input autoFocus={true} onBlur={() => {\r\n                                renameGroup(groupName)\r\n                            }}\r\n                                onChange={(e) => { setGroupName(e.target.value) }}\r\n                                value={groupName} />\r\n                        </span>\r\n                }\r\n            </div>\r\n            {!roled ? null : <div>\r\n                <h3>Роли</h3>\r\n                <div>\r\n                    <h4>Владелец</h4>\r\n                    <ul className='role_list'>\r\n                        {roled\r\n                            .filter(item => item.role === 'owner')\r\n                            .map(item => <li className='role_item'>\r\n                                <div className='role_item_name'>\r\n                                    {item.user_name}\r\n                                </div>\r\n                            </li>\r\n                            )}\r\n                    </ul>\r\n                    <h4>Администраторы</h4>\r\n                    <ul className='role_list'>\r\n                        {roled\r\n                            .filter(item => item.role === 'admin')\r\n                            .map(item => <li className='role_item'>\r\n                                <div className='role_item_name'\r\n                                    onClick={(e) => {\r\n                                        if (JSON.parse(localStorage.getItem('role')).role === 'owner') toggleMenu(e)\r\n                                    }}\r\n                                >\r\n                                    {item.user_name}\r\n                                </div>\r\n\r\n                                <div className='react-contextmenu'>\r\n\r\n                                    <div className='react-contextmenu-item'\r\n                                        onClick={() => { changeRole(item.user_name, 'moderator') }}>\r\n                                        Назначить модератором\r\n                                </div>\r\n                                    <div className='react-contextmenu-item'\r\n                                        onClick={() => { changeRole(item.user_name, 'partner') }}>\r\n                                        Назначить обычным пользователем\r\n                                </div>\r\n                                    <div className='react-contextmenu-item'\r\n                                        onClick={() => { deleteUser(item.user_name) }}>\r\n                                        Удалить из Группы\r\n                                </div>\r\n                                </div>\r\n                            </li>\r\n                            )}\r\n                    </ul>\r\n                    <h4>Модераторы</h4>\r\n                    <ul className='role_list'>\r\n                        {roled\r\n                            .filter(item => item.role === 'moderator')\r\n                            .map(item => <li className='role_item'>\r\n                                <div className='role_item_name'\r\n                                    onClick={(e) => {\r\n                                        if (JSON.parse(localStorage.getItem('role')).role === 'owner'\r\n                                            || JSON.parse(localStorage.getItem('role')).role === 'admin') toggleMenu(e)\r\n                                    }}\r\n                                >\r\n                                    {item.user_name}\r\n                                </div>\r\n\r\n                                <div className='react-contextmenu'>\r\n                                    <div className='react-contextmenu-item'\r\n                                        onClick={() => { changeRole(item.user_name, 'admin') }}>\r\n                                        Назначить администратором\r\n                                </div>\r\n\r\n                                    <div className='react-contextmenu-item'\r\n                                        onClick={() => { changeRole(item.user_name, 'partner') }}>\r\n                                        Назначить обычным пользователем\r\n                                </div>\r\n                                    <div className='react-contextmenu-item'\r\n                                        onClick={() => { deleteUser(item.user_name) }}>\r\n                                        Удалить из Группы\r\n                                </div>\r\n                                </div>\r\n                            </li>\r\n                            )}\r\n                    </ul>\r\n                    <h4>Пользователи</h4>\r\n                    <ul className='role_list'>\r\n                        {roled\r\n                            .filter(item => item.role === 'partner')\r\n                            .map(item => <li className='role_item'>\r\n                                <div className='role_item_name'\r\n                                    onClick={(e) => {\r\n                                        if (JSON.parse(localStorage.getItem('role')).role === 'owner'\r\n                                            || JSON.parse(localStorage.getItem('role')).role === 'admin') toggleMenu(e)\r\n                                    }}\r\n                                >\r\n                                    {item.user_name}\r\n                                </div>\r\n\r\n                                <div className='react-contextmenu'>\r\n                                    <div className='react-contextmenu-item'\r\n                                        onClick={() => { changeRole(item.user_name, 'admin') }}>\r\n                                        Назначить администратором\r\n                                </div>\r\n\r\n                                    <div className='react-contextmenu-item'\r\n                                        onClick={() => { changeRole(item.user_name, 'moderator') }}>\r\n                                        Назначить модератором\r\n                                </div>\r\n                                    <div className='react-contextmenu-item'\r\n                                        onClick={() => { deleteUser(item.user_name) }}>\r\n                                        Удалить из Группы\r\n                                </div>\r\n                                </div>\r\n\r\n                            </li>\r\n                            )}\r\n                    </ul>\r\n                    <h4>Лист ожидания</h4>\r\n                    <ul className='role_list'>\r\n                        {roled\r\n                            .filter(item => item.role === 'invited')\r\n                            .map(item => <li className='role_item'>\r\n                                <div className='role_item_name'\r\n                                    onClick={(e) => {\r\n                                        if (JSON.parse(localStorage.getItem('role')).role === 'owner'\r\n                                            || JSON.parse(localStorage.getItem('role')).role === 'admin') toggleMenu(e)\r\n                                    }}\r\n                                >\r\n                                    {item.user_name}\r\n                                </div>\r\n\r\n                                <div className='react-contextmenu'>\r\n                                    <div className='react-contextmenu-item'\r\n                                        onClick={() => { changeRole(item.user_name, 'admin') }}>\r\n                                        Назначить администратором\r\n                                </div>\r\n\r\n                                    <div className='react-contextmenu-item'\r\n                                        onClick={() => { changeRole(item.user_name, 'moderator') }}>\r\n                                        Назначить модератором\r\n                                </div>\r\n                                    <div className='react-contextmenu-item'\r\n                                        onClick={() => { changeRole(item.user_name, 'partner') }}>\r\n                                        Назначить обычным пользователем\r\n                                </div>\r\n                                    <div className='react-contextmenu-item'\r\n                                        onClick={() => { deleteUser(item.user_name) }}>\r\n                                        Удалить из Группы\r\n                                </div>\r\n                                </div>\r\n                            </li>\r\n                            )}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n        {\r\n            !roledSimple ? null : <div>\r\n                <h3>Права достуа</h3>\r\n                <ul className='role_list'>\r\n                    {roledSimple.map(item => <li className='role_item'>\r\n                        <div className='role_item_name'\r\n                            onClick={(e) => {\r\n                                if (JSON.parse(localStorage.getItem('role')).role === 'owner'\r\n                                    || JSON.parse(localStorage.getItem('role')).role === 'admin') toggleMenu(e)\r\n                            }}\r\n                        >\r\n                            {item.user_name}\r\n                        </div>\r\n\r\n                        <div className='react-contextmenu'>\r\n                            <div className='react-contextmenu-item'\r\n                                onClick={(e) => { toggleMenu(e) }}>\r\n                                Право на посещение\r\n                                </div>\r\n\r\n                            <div className='react-contextmenu'>\r\n                                <div className='react-contextmenu-item'\r\n                                    onClick={() => { changeRole(item.user_name, 'admin') }}>\r\n                                    Создать белый список\r\n                                </div>\r\n\r\n                                <div className='react-contextmenu-item'\r\n                                    onClick={() => { changeRole(item.user_name, 'moderator') }}>\r\n                                    Создать черный список\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className='react-contextmenu-item'\r\n                                onClick={() => { changeRole(item.user_name, 'moderator') }}>\r\n                                Право на отправку\r\n                                </div>\r\n                            {/* <div className='react-contextmenu-item'\r\n                                    onClick={() => { changeRole(item.user_name, 'partner') }}>\r\n                                    Назначить обычным пользователем\r\n                                </div>\r\n                                <div className='react-contextmenu-item'\r\n                                    onClick={() => { deleteUser(item.user_name) }}>\r\n                                    Удалить из Группы\r\n                                </div> */}\r\n                        </div>\r\n                    </li>)}\r\n                </ul>\r\n            </div>\r\n        }\r\n\r\n    </div >\r\n}\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        author: state.auth.id,\r\n        name: state.auth.name,\r\n        rightsSetingForm: state.groups.rightsSetingForm,\r\n        selectedGroup: state.groups.selectedGroup,\r\n        selectedChanel: state.groups.selectedChanel,\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { SetRightsForm })(GroupSetingForm);","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\SingleGroupSettings.jsx",["375","376","377","378","379","380","381"],"import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\n\r\nfunction SingleGroupSettings(props) {\r\n    let [roled, setRoled] = useState(null)\r\n    let arr = []\r\n    useEffect(async () => {\r\n        let res = await axios.get('http://localhost:8001/roles/' + props.role + '/' + props.group._id)\r\n        setRoled(res.data)\r\n    }, [])\r\n    let popup = (e) => {\r\n        if (e.target.className == 'button') e.target.parentNode.nextElementSibling.classList.add('overlay_target')\r\n        if (e.target.classList[0] == 'overlay' || e.target.className == 'close') e.target.closest('.overlay').classList.toggle('overlay_target')\r\n    }\r\n    let createList = (e, name) => {\r\n        if (arr.some(item => item === name)) {\r\n            arr.splice(arr.indexOf(name), 1)\r\n            e.target.style.backgroundColor = ''\r\n        } else {\r\n\r\n            arr.push(name)\r\n            e.target.style.backgroundColor = 'blueviolet'\r\n        }\r\n        console.log(arr)\r\n    }\r\n    let sendList = (groupId) => {\r\n        debugger\r\n        axios.put('http://localhost:8001/group/update/' + props.role + '/' + groupId, { list: arr })\r\n    }\r\n    return <li className='right_item'>\r\n        <div>{props.title}</div>\r\n        <div className=''>\r\n            <div className='popup_wrapper' onClick={(e) => { popup(e) }}>\r\n                <div class=\"box\">\r\n                    <a class=\"button\">Назначить пользователей</a>\r\n                </div>\r\n\r\n                <div class=\"overlay\" >\r\n                    <div class=\"popup\">\r\n                        <h2>Назначить пользователей</h2>\r\n                        <a class=\"close\">&times;</a>\r\n                        <div class=\"content\">\r\n                            <ul className='user_list'>\r\n                                \r\n                                {!roled ? null :\r\n                                    roled.map(item =>\r\n                                        <li onClick={(e) => { createList(e, item) }}\r\n                                            className='user_item'>\r\n                                            {item.user_name}\r\n                                        </li>)\r\n                                }\r\n                            </ul>\r\n                            <button onClick={() => {\r\n                                sendList(props.group._id, true)\r\n                            }}>ОК</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </li>\r\n}\r\n\r\nexport default SingleGroupSettings;",["382","383"],"C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\AddUsersForm.jsx",["384","385","386","387","388","389"],"import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport Preloader from '../Preloader/Preloader';\r\nfunction AddUsersForm(props) {\r\n    let [usersList, setUsersList] = useState(null);\r\n    let [openList, setOpenList] = useState(false)\r\n    let arr = []\r\n    let [partnerArr, setPartner] = useState([]);\r\n    let [roles, setRoles] = useState([]);\r\n    let [allow, setAllow] = useState(props.role)\r\n    // if (JSON.parse(localStorage.getItem('role')).role==='admin'\r\n    // ||JSON.parse(localStorage.getItem('role')).role==='moderator'){\r\n    //     setAllow(JSON.parse(localStorage.getItem('role')).role_key)\r\n    // }\r\n    let seeUserslist = async () => {\r\n        if (!usersList) {\r\n            let req = await axios.get('http://localhost:8001/users')\r\n            setUsersList(req.data)\r\n            setOpenList(true)\r\n        } else {\r\n            setOpenList(false)\r\n        }\r\n    }\r\n    let addUser = (e, name) => {\r\n        let role = {\r\n            role: 'partner',\r\n            user_name: name,\r\n            group_id: props.selectedGroup._id\r\n        }\r\n        if (partnerArr.some(item => item === name)) {\r\n            let index = partnerArr.indexOf(name);\r\n            setPartner(name.splice(index, 1))\r\n            setRoles(roles.splice(index, 1))\r\n            e.target.style.backgroundColor = ''\r\n        } else {\r\n            setPartner([...partnerArr, name])\r\n            setRoles([...roles, role])\r\n            e.target.style.backgroundColor = 'blueviolet'\r\n        }\r\n        console.log(arr)\r\n        console.log(roles)\r\n    }\r\n    let sendUsers = async () => {\r\n        let body;\r\n        if (JSON.parse(localStorage.getItem('role')).role === 'admin'\r\n            || JSON.parse(localStorage.getItem('role')).role === 'owner') {\r\n            body = {\r\n                new_parters: partnerArr,\r\n                roles,\r\n                role: \"partner\"\r\n            };\r\n        } else {\r\n            body = {\r\n                new_parters: partnerArr,\r\n                roles,\r\n                role: 'invited'\r\n            };\r\n        }\r\n        await axios.put('http://localhost:8001/group_add_user/' + props.selectedGroup._id, body,\r\n            {\r\n                headers: {\r\n                    'Role-Access': 'Access ' + JSON.parse(localStorage.getItem('role')).role_key\r\n                }\r\n            })\r\n        setOpenList(false)\r\n    }\r\n    return <div>\r\n        <div class=\"box\" onClick={() => { props.toggleAddUsersForm(!props.addUsersForm) }}>\r\n            <a class=\"button\">{props.title}</a>\r\n        </div>\r\n        {\r\n            !openList\r\n                ? null\r\n                : <div>\r\n                    <ul>\r\n                        {\r\n                            usersList.map(item => <li onClick={(e) => { addUser(e, item.name) }}>\r\n                                {item.name}\r\n                            </li>)\r\n                        }\r\n                    </ul>\r\n                    <button\r\n                        disabled={partnerArr.length === 0 ? true : false}\r\n                        onClick={sendUsers}\r\n                    >\r\n                        Добавить\r\n                    </button>\r\n                </div>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default AddUsersForm;","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\SingleRightPopup.jsx",["390","391","392","393","394","395","396","397","398","399","400","401"],"import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\n\r\nfunction SingleRightPopup(props) {\r\n    debugger\r\n    // let [list, setList] = useState([])\r\n    let arr = props.right.list;\r\n    let [simpleRoles, setSimpleRoles] = useState(null)\r\n\r\n    let popup = (e) => {\r\n        if (e.target.className == 'button') e.target.parentNode.nextElementSibling.classList.add('overlay_target')\r\n        if (e.target.classList[0] == 'overlay' || e.target.className == 'close') e.target.closest('.overlay').classList.toggle('overlay_target')\r\n    }\r\n    let createList = (e, name) => {\r\n        if (arr.some(item => item === name)) {\r\n            arr.splice(arr.indexOf(name), 1)\r\n            // setList(list.splice(list.indexOf(name),1))\r\n            e.target.style.backgroundColor = ''\r\n            // e.target.classList.toggle('.chosen_item')\r\n        } else {\r\n            arr.push(name)\r\n            // setList([...list,name])\r\n            // e.target.classList.toggle('.chosen_item')\r\n            e.target.style.backgroundColor = 'blueviolet'\r\n        }\r\n        console.log(arr)\r\n    }\r\n    let sendList = (rightId, whitelisted) => {\r\n        if (!props.right.prevelegion) {\r\n            debugger\r\n            axios.put('http://localhost:8001/right/update/' + rightId, { list: arr, prevelegion: true, whitelisted })\r\n        } else {\r\n            axios.put('http://localhost:8001/right/update/' + rightId, { list: arr })\r\n        }\r\n    }\r\n    return <div>\r\n        <div className='whitelist'>\r\n            <div className='popup_wrapper' onClick={(e) => { popup(e) }}>\r\n                <div class=\"box\">\r\n                    <a class=\"button\">{props.WLtitle}</a>\r\n                </div>\r\n\r\n                <div class=\"overlay\" >\r\n                    <div class=\"popup\">\r\n                        <h2>{props.WLtitle}</h2>\r\n                        <a class=\"close\">&times;</a>\r\n                        <div class=\"content\">\r\n                            {!props.SimpleRoles\r\n                            ? null\r\n                            :<ul className='user_list'>\r\n                                {props.SimpleRoles\r\n                                .filter(item=>item.user_name)\r\n                                .map(item => {\r\n                                    if (props.right.list.some(list_item => list_item == item)) {\r\n                                        return <li\r\n                                            style={props.right.whitelisted\r\n                                                ? { backgroundColor: 'green' }\r\n                                                : { backgroundColor: 'red' }}\r\n                                            onClick={(e) => { createList(e, item) }}\r\n                                            className='user_item'>\r\n                                            {item}\r\n                                        </li>\r\n                                    } else {\r\n                                        return <li\r\n                                            onClick={(e) => { createList(e, item) }}\r\n                                            className='user_item'>\r\n                                            {item}\r\n                                        </li>\r\n                                    }\r\n                                }\r\n                                )}\r\n                            </ul>}\r\n                            <button onClick={() => {\r\n                                sendList(props.right._id, true)\r\n                            }}>ОК</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div className='blacklist'>\r\n            <div className='popup_wrapper' onClick={(e) => { popup(e) }}>\r\n                <div class=\"box\">\r\n                    <a class=\"button\">{props.BLtitle}</a>\r\n                </div>\r\n\r\n                <div class=\"overlay\" >\r\n                    <div class=\"popup\">\r\n                        <h2>{props.BLtitle}</h2>\r\n                        <a class=\"close\">&times;</a>\r\n                        <div class=\"content\">\r\n                            <ul className='user_list'>\r\n                                {props.group.partners.map(item => {\r\n                                    if (props.right.list.some(list_item => list_item == item)) {\r\n                                        return <li\r\n                                            style={props.right.whitelisted\r\n                                                ? { backgroundColor: 'green' }\r\n                                                : { backgroundColor: 'red' }}\r\n                                            onClick={(e) => { createList(e, item) }}\r\n                                            className='user_item'>\r\n                                            {item}\r\n                                        </li>\r\n                                    } else {\r\n                                        return <li\r\n                                            onClick={(e) => { createList(e, item) }}\r\n                                            className='user_item'>\r\n                                            {item}\r\n                                        </li>\r\n                                    }\r\n                                }\r\n                                )}\r\n                            </ul>\r\n                            <button onClick={() => {\r\n                                sendList(props.right._id, false)\r\n                            }}>ОК</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\nexport default SingleRightPopup","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\redux\\searchReduser.js",[],"C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\DAL\\api.js",["402"],"C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Chats\\CreateGroup.jsx",["403","404","405"],"import { Button, Input } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { groupAPI } from '../../DAL/api';\r\n\r\nfunction CreateGroup(props) {\r\n\r\n    let [usersList, setUsersList] = useState(null);\r\n    let [partnerArr, setPartner] = useState([]);\r\n    let arr = [];\r\n    let [groupName, setGroupName] = useState('');\r\n    let [roles, setRoles] = useState([\r\n        {\r\n            role: 'admin',\r\n            user_name: props.name\r\n        }\r\n    ]);\r\n\r\n    let addPartner = (e, partnerId, partnerName) => {\r\n        let role = {\r\n            role: 'partner',\r\n            user_name: partnerName\r\n        }\r\n        debugger\r\n        if (partnerArr.some(item => item === partnerName)) {\r\n            debugger\r\n            let index = arr.indexOf(partnerName);\r\n            setPartner(partnerArr.splice(index, 1))\r\n            setRoles(roles.splice(index, 1))\r\n            e.target.style.backgroundColor = ''\r\n        } else {\r\n            setPartner([...partnerArr, partnerName])\r\n            setRoles([...roles, role])\r\n            e.target.style.backgroundColor = 'blueviolet'\r\n        }\r\n        console.log(partnerArr)\r\n        console.log(roles)\r\n        // setPartner(Array.from(new Set([...partnerArr, partnerName])))\r\n    }\r\n    let createNewGroup = async () => {\r\n        debugger\r\n        await groupAPI.createGroup({\r\n            name: groupName,\r\n            author: props.author,\r\n            partners: partnerArr,\r\n            roles\r\n        })\r\n    }\r\n\r\n    useEffect(async () => {\r\n        let req = await axios.get('http://localhost:8001/friends/' + props.author);\r\n        setUsersList(req.data)\r\n    }, [])\r\n\r\n    return (\r\n        <div className='create_group'>\r\n\r\n                <label for='group_name'>Название группы</label>\r\n                <Input id='group_name' onChange={(e) => { setGroupName(e.target.value) }} value={groupName}/>\r\n                {/* <input id='group_name' onChange={(e) => { setGroupName(e.target.value) }} value={groupName}></input> */}\r\n                <div>\r\n                    <div>\r\n                        <h2>Выберете участников</h2>\r\n                        {!usersList ? null\r\n                            : <div class=\"content\">\r\n                                <ul className='user_list'>\r\n                                    {usersList.friends.map(item => {\r\n                                        if (item.initiator._id === props.author) {\r\n                                            return <li className='user_item'\r\n                                                onClick={(e) => { addPartner(e, item.partner._id, item.partner.name) }}>\r\n                                                {item.partner.name}\r\n                                            </li>\r\n                                        }\r\n                                        if (item.partner._id === props.author) {\r\n                                            return <li className='user_item'\r\n                                                onClick={(e) => { addPartner(e, item.initiator._id, item.initiator.name) }}>\r\n                                                {item.initiator.name}\r\n                                            </li>\r\n                                        }\r\n                                    }\r\n                                    )}\r\n                                </ul>\r\n                                {/* <button disabled={partnerArr.length === 0 ? true : false}\r\n                                    onClick={() => {\r\n                                        debugger\r\n                                        createNewGroup()\r\n                                    }}>\r\n                                    Создать группу\r\n                                </button> */}\r\n                                <Button className='chanel_btn' \r\n                                variant=\"contained\" \r\n                                color=\"primary\"\r\n                                disabled={partnerArr.length === 0 ? true : false}\r\n                                    onClick={() => {\r\n                                        debugger\r\n                                        createNewGroup()\r\n                                    }}\r\n                                >Создать</Button>\r\n                            </div>}\r\n                    </div>\r\n                </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateGroup;","C:\\Users\\Pavel\\Desktop\\projects\\Role-acces-chat\\client\\src\\Components\\Main\\RightsMenu.jsx",["406","407","408","409","410","411","412","413","414","415","416","417","418","419","420"],"\r\nimport { io } from \"socket.io-client\";\r\nimport { socket } from '../../App';\r\nimport Preloader from '../Preloader/Preloader';\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { SetRightsForm, setSimpleRoles } from '../../redux/groupsReduser'\r\nimport { connect } from 'react-redux';\r\nimport SingleRightSettings from \"./SingleRightSettings\";\r\nimport { rightsAPI } from \"../../DAL/api\";\r\nfunction RightsMenu(props) {\r\n\r\n    let toggleMenu = (e) => {\r\n        debugger\r\n        e.target.nextElementSibling.classList.toggle('open_menu')\r\n    }\r\n    // let arr = chanel.canSee.list;\r\n    let sendList = async (rightId, name, whitelisted) => {\r\n        if (!props.right.prevelegion) {\r\n            debugger\r\n            await rightsAPI.addToList(props.group._id,rightId, {\r\n                list: name, prevelegion: true, whitelisted\r\n            })\r\n        } else {\r\n            await rightsAPI.addToList(props.group._id,rightId, {\r\n                list: name, same: whitelisted == props.right.whitelisted\r\n            })\r\n        }\r\n    }\r\n    let removeFromList = async (rightId, name) => {\r\n        await rightsAPI.removeFromList(props.group._id,rightId, {\r\n            user_name: name\r\n        })\r\n    }\r\n\r\n    return <div>\r\n        <div className='react-contextmenu-item'\r\n            onClick={(e) => { toggleMenu(e) }}\r\n            style={!props.right.prevelegion ? {}\r\n                : props.right.whitelisted && props.right.list.some(item => item == props.user_name) ? { backgroundColor: 'green' }\r\n                    : props.right.blacklisted && props.right.list.some(item => item == props.user_name) ? { backgroundColor: 'red' }\r\n                        : {}}>\r\n            {props.rightTitle}\r\n        </div>\r\n        {\r\n            !props.right.prevelegion ? <div className='react-contextmenu'>\r\n                <div className='react-contextmenu-item'\r\n                    onClick={() => { sendList(props.rightId, props.user_name, true) }}>\r\n                    Создать белый список\r\n                                </div>\r\n\r\n                <div className='react-contextmenu-item'\r\n                    onClick={() => { sendList(props.rightId, props.user_name, false) }}>\r\n                    Создать черный список\r\n                                </div>\r\n            </div>\r\n                : props.right.whitelisted\r\n                    ? <div className='react-contextmenu'>\r\n                        {!props.right.list.some(item => item == props.user_name)\r\n                            ? <div className='react-contextmenu-item'\r\n                                onClick={() => { sendList(props.rightId, props.user_name, true) }}\r\n                            >\r\n                                Добавить в белый список\r\n                            </div>\r\n                            : <div className='react-contextmenu-item'\r\n                                onClick={() => { removeFromList(props.rightId, props.user_name) }}\r\n                            >\r\n                                Удалить из белого списка\r\n                            </div>}\r\n\r\n                        <div className='react-contextmenu-item'\r\n                            onClick={() => { sendList(props.rightId, props.user_name, false) }}>\r\n                            Создать черный список\r\n                            </div>\r\n                    </div>\r\n                    : <div className='react-contextmenu'>\r\n                        <div className='react-contextmenu-item'\r\n                            onClick={() => { sendList(props.rightId, props.user_name, true) }}>\r\n                            Создать белый список\r\n                        </div>\r\n\r\n                        {!props.right.list.some(item => item == props.user_name)\r\n                            ? <div className='react-contextmenu-item'\r\n                                onClick={() => { sendList(props.rightId, props.user_name, true) }}\r\n                            >\r\n                                Добавить в черный список\r\n                            </div>\r\n                            : <div className='react-contextmenu-item'\r\n                                onClick={() => { removeFromList(props.rightId, props.user_name) }}\r\n                            >\r\n                                Удалить из черного списка\r\n                            </div>}\r\n                    </div>\r\n\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default RightsMenu;",{"ruleId":"421","severity":1,"message":"422","line":5,"column":10,"nodeType":"423","messageId":"424","endLine":5,"endColumn":23},{"ruleId":"425","replacedBy":"426"},{"ruleId":"427","replacedBy":"428"},{"ruleId":"421","severity":1,"message":"429","line":2,"column":10,"nodeType":"423","messageId":"424","endLine":2,"endColumn":21},{"ruleId":"421","severity":1,"message":"430","line":4,"column":25,"nodeType":"423","messageId":"424","endLine":4,"endColumn":30},{"ruleId":"421","severity":1,"message":"431","line":4,"column":32,"nodeType":"423","messageId":"424","endLine":4,"endColumn":38},{"ruleId":"421","severity":1,"message":"432","line":4,"column":40,"nodeType":"423","messageId":"424","endLine":4,"endColumn":50},{"ruleId":"421","severity":1,"message":"433","line":6,"column":8,"nodeType":"423","messageId":"424","endLine":6,"endColumn":12},{"ruleId":"421","severity":1,"message":"434","line":7,"column":8,"nodeType":"423","messageId":"424","endLine":7,"endColumn":16},{"ruleId":"421","severity":1,"message":"435","line":8,"column":8,"nodeType":"423","messageId":"424","endLine":8,"endColumn":12},{"ruleId":"421","severity":1,"message":"436","line":9,"column":8,"nodeType":"423","messageId":"424","endLine":9,"endColumn":17},{"ruleId":"421","severity":1,"message":"437","line":15,"column":8,"nodeType":"423","messageId":"424","endLine":15,"endColumn":13},{"ruleId":"421","severity":1,"message":"438","line":15,"column":15,"nodeType":"423","messageId":"424","endLine":15,"endColumn":23},{"ruleId":"439","severity":1,"message":"440","line":17,"column":13,"nodeType":"441","endLine":30,"endColumn":4},{"ruleId":"439","severity":1,"message":"442","line":30,"column":6,"nodeType":"443","endLine":30,"endColumn":8,"suggestions":"444"},{"ruleId":"421","severity":1,"message":"436","line":7,"column":8,"nodeType":"423","messageId":"424","endLine":7,"endColumn":17},{"ruleId":"421","severity":1,"message":"445","line":2,"column":17,"nodeType":"423","messageId":"424","endLine":2,"endColumn":25},{"ruleId":"421","severity":1,"message":"446","line":5,"column":8,"nodeType":"423","messageId":"424","endLine":5,"endColumn":19},{"ruleId":"447","severity":1,"message":"448","line":93,"column":1,"nodeType":"423","messageId":"449","endLine":93,"endColumn":9},{"ruleId":"450","severity":1,"message":"451","line":11,"column":17,"nodeType":"452","endLine":11,"endColumn":33},{"ruleId":"450","severity":1,"message":"451","line":22,"column":29,"nodeType":"452","endLine":22,"endColumn":54},{"ruleId":"450","severity":1,"message":"451","line":30,"column":57,"nodeType":"452","endLine":30,"endColumn":116},{"ruleId":"450","severity":1,"message":"451","line":43,"column":121,"nodeType":"452","endLine":43,"endColumn":163},{"ruleId":"421","severity":1,"message":"453","line":5,"column":39,"nodeType":"423","messageId":"424","endLine":5,"endColumn":54},{"ruleId":"421","severity":1,"message":"454","line":1,"column":7,"nodeType":"423","messageId":"424","endLine":1,"endColumn":12},{"ruleId":"421","severity":1,"message":"455","line":5,"column":7,"nodeType":"423","messageId":"424","endLine":5,"endColumn":18},{"ruleId":"425","replacedBy":"456"},{"ruleId":"427","replacedBy":"457"},{"ruleId":"421","severity":1,"message":"445","line":2,"column":17,"nodeType":"423","messageId":"424","endLine":2,"endColumn":25},{"ruleId":"421","severity":1,"message":"446","line":5,"column":8,"nodeType":"423","messageId":"424","endLine":5,"endColumn":19},{"ruleId":"421","severity":1,"message":"458","line":13,"column":10,"nodeType":"423","messageId":"424","endLine":13,"endColumn":17},{"ruleId":"447","severity":1,"message":"459","line":97,"column":1,"nodeType":"423","messageId":"449","endLine":97,"endColumn":13},{"ruleId":"421","severity":1,"message":"460","line":104,"column":17,"nodeType":"423","messageId":"424","endLine":104,"endColumn":20},{"ruleId":"421","severity":1,"message":"458","line":1,"column":10,"nodeType":"423","messageId":"424","endLine":1,"endColumn":17},{"ruleId":"421","severity":1,"message":"422","line":5,"column":10,"nodeType":"423","messageId":"424","endLine":5,"endColumn":23},{"ruleId":"425","replacedBy":"461"},{"ruleId":"427","replacedBy":"462"},{"ruleId":"463","severity":1,"message":"464","line":15,"column":41,"nodeType":"465","messageId":"466","endLine":15,"endColumn":43},{"ruleId":"463","severity":1,"message":"464","line":18,"column":45,"nodeType":"465","messageId":"466","endLine":18,"endColumn":47},{"ruleId":"421","severity":1,"message":"437","line":28,"column":8,"nodeType":"423","messageId":"424","endLine":28,"endColumn":13},{"ruleId":"421","severity":1,"message":"438","line":28,"column":15,"nodeType":"423","messageId":"424","endLine":28,"endColumn":23},{"ruleId":"421","severity":1,"message":"467","line":29,"column":8,"nodeType":"423","messageId":"424","endLine":29,"endColumn":13},{"ruleId":"421","severity":1,"message":"468","line":29,"column":15,"nodeType":"423","messageId":"424","endLine":29,"endColumn":23},{"ruleId":"421","severity":1,"message":"469","line":30,"column":7,"nodeType":"423","messageId":"424","endLine":30,"endColumn":15},{"ruleId":"439","severity":1,"message":"440","line":31,"column":13,"nodeType":"441","endLine":128,"endColumn":4},{"ruleId":"470","severity":1,"message":"471","line":67,"column":48,"nodeType":"472","messageId":"473","endLine":67,"endColumn":50},{"ruleId":"470","severity":1,"message":"471","line":68,"column":13,"nodeType":"472","messageId":"473","endLine":68,"endColumn":15},{"ruleId":"470","severity":1,"message":"474","line":68,"column":13,"nodeType":"472","messageId":"473","endLine":68,"endColumn":15},{"ruleId":"470","severity":1,"message":"474","line":68,"column":50,"nodeType":"472","messageId":"473","endLine":68,"endColumn":52},{"ruleId":"470","severity":1,"message":"474","line":69,"column":13,"nodeType":"472","messageId":"473","endLine":69,"endColumn":15},{"ruleId":"470","severity":1,"message":"474","line":69,"column":51,"nodeType":"472","messageId":"473","endLine":69,"endColumn":53},{"ruleId":"439","severity":1,"message":"442","line":128,"column":6,"nodeType":"443","endLine":128,"endColumn":8,"suggestions":"475"},{"ruleId":"421","severity":1,"message":"454","line":1,"column":7,"nodeType":"423","messageId":"424","endLine":1,"endColumn":12},{"ruleId":"421","severity":1,"message":"455","line":5,"column":7,"nodeType":"423","messageId":"424","endLine":5,"endColumn":18},{"ruleId":"421","severity":1,"message":"436","line":7,"column":8,"nodeType":"423","messageId":"424","endLine":7,"endColumn":17},{"ruleId":"439","severity":1,"message":"440","line":22,"column":15,"nodeType":"441","endLine":25,"endColumn":6},{"ruleId":"439","severity":1,"message":"476","line":25,"column":8,"nodeType":"443","endLine":25,"endColumn":10,"suggestions":"477"},{"ruleId":"463","severity":1,"message":"464","line":85,"column":50,"nodeType":"465","messageId":"466","endLine":85,"endColumn":52},{"ruleId":"463","severity":1,"message":"464","line":87,"column":55,"nodeType":"465","messageId":"466","endLine":87,"endColumn":57},{"ruleId":"478","severity":1,"message":"479","line":98,"column":46,"nodeType":"465","messageId":"480","endLine":98,"endColumn":47},{"ruleId":"450","severity":1,"message":"451","line":101,"column":21,"nodeType":"452","endLine":101,"endColumn":42},{"ruleId":"481","severity":1,"message":"482","line":105,"column":61,"nodeType":"441","messageId":"483","endLine":105,"endColumn":63},{"ruleId":"421","severity":1,"message":"445","line":2,"column":17,"nodeType":"423","messageId":"424","endLine":2,"endColumn":25},{"ruleId":"421","severity":1,"message":"446","line":5,"column":8,"nodeType":"423","messageId":"424","endLine":5,"endColumn":19},{"ruleId":"421","severity":1,"message":"458","line":13,"column":10,"nodeType":"423","messageId":"424","endLine":13,"endColumn":17},{"ruleId":"447","severity":1,"message":"459","line":97,"column":1,"nodeType":"423","messageId":"449","endLine":97,"endColumn":13},{"ruleId":"421","severity":1,"message":"460","line":104,"column":17,"nodeType":"423","messageId":"424","endLine":104,"endColumn":20},{"ruleId":"421","severity":1,"message":"445","line":2,"column":17,"nodeType":"423","messageId":"424","endLine":2,"endColumn":25},{"ruleId":"421","severity":1,"message":"446","line":5,"column":8,"nodeType":"423","messageId":"424","endLine":5,"endColumn":19},{"ruleId":"447","severity":1,"message":"448","line":93,"column":1,"nodeType":"423","messageId":"449","endLine":93,"endColumn":9},{"ruleId":"421","severity":1,"message":"484","line":3,"column":8,"nodeType":"423","messageId":"424","endLine":3,"endColumn":13},{"ruleId":"421","severity":1,"message":"485","line":4,"column":10,"nodeType":"423","messageId":"424","endLine":4,"endColumn":19},{"ruleId":"421","severity":1,"message":"486","line":5,"column":8,"nodeType":"423","messageId":"424","endLine":5,"endColumn":13},{"ruleId":"421","severity":1,"message":"436","line":7,"column":8,"nodeType":"423","messageId":"424","endLine":7,"endColumn":17},{"ruleId":"487","severity":1,"message":"488","line":17,"column":5,"nodeType":"489","messageId":"490","endLine":17,"endColumn":32},{"ruleId":"421","severity":1,"message":"491","line":11,"column":9,"nodeType":"423","messageId":"424","endLine":11,"endColumn":19},{"ruleId":"421","severity":1,"message":"486","line":3,"column":8,"nodeType":"423","messageId":"424","endLine":3,"endColumn":13},{"ruleId":"421","severity":1,"message":"492","line":12,"column":9,"nodeType":"423","messageId":"424","endLine":12,"endColumn":15},{"ruleId":"450","severity":1,"message":"451","line":66,"column":57,"nodeType":"452","endLine":66,"endColumn":116},{"ruleId":"463","severity":1,"message":"464","line":127,"column":45,"nodeType":"465","messageId":"466","endLine":127,"endColumn":47},{"ruleId":"421","severity":1,"message":"493","line":5,"column":8,"nodeType":"423","messageId":"424","endLine":5,"endColumn":20},{"ruleId":"421","severity":1,"message":"494","line":7,"column":8,"nodeType":"423","messageId":"424","endLine":7,"endColumn":20},{"ruleId":"421","severity":1,"message":"495","line":8,"column":8,"nodeType":"423","messageId":"424","endLine":8,"endColumn":14},{"ruleId":"421","severity":1,"message":"496","line":13,"column":10,"nodeType":"423","messageId":"424","endLine":13,"endColumn":15},{"ruleId":"421","severity":1,"message":"497","line":13,"column":17,"nodeType":"423","messageId":"424","endLine":13,"endColumn":25},{"ruleId":"439","severity":1,"message":"440","line":14,"column":15,"nodeType":"441","endLine":20,"endColumn":6},{"ruleId":"439","severity":1,"message":"442","line":20,"column":8,"nodeType":"443","endLine":20,"endColumn":29,"suggestions":"498"},{"ruleId":"439","severity":1,"message":"440","line":22,"column":15,"nodeType":"441","endLine":25,"endColumn":6},{"ruleId":"439","severity":1,"message":"499","line":25,"column":8,"nodeType":"443","endLine":25,"endColumn":36,"suggestions":"500"},{"ruleId":"439","severity":1,"message":"440","line":26,"column":15,"nodeType":"441","endLine":29,"endColumn":6},{"ruleId":"439","severity":1,"message":"499","line":29,"column":8,"nodeType":"443","endLine":29,"endColumn":36,"suggestions":"501"},{"ruleId":"421","severity":1,"message":"502","line":1,"column":31,"nodeType":"423","messageId":"424","endLine":1,"endColumn":36},{"ruleId":"439","severity":1,"message":"440","line":66,"column":15,"nodeType":"441","endLine":69,"endColumn":6},{"ruleId":"439","severity":1,"message":"476","line":69,"column":8,"nodeType":"443","endLine":69,"endColumn":10,"suggestions":"503"},{"ruleId":"439","severity":1,"message":"504","line":74,"column":8,"nodeType":"443","endLine":74,"endColumn":24,"suggestions":"505"},{"ruleId":"481","severity":1,"message":"482","line":160,"column":54,"nodeType":"441","messageId":"483","endLine":160,"endColumn":56},{"ruleId":"450","severity":1,"message":"451","line":8,"column":17,"nodeType":"452","endLine":8,"endColumn":33},{"ruleId":"421","severity":1,"message":"506","line":1,"column":10,"nodeType":"423","messageId":"424","endLine":1,"endColumn":16},{"ruleId":"421","severity":1,"message":"507","line":2,"column":10,"nodeType":"423","messageId":"424","endLine":2,"endColumn":12},{"ruleId":"470","severity":1,"message":"474","line":31,"column":25,"nodeType":"472","messageId":"473","endLine":31,"endColumn":27},{"ruleId":"470","severity":1,"message":"474","line":31,"column":90,"nodeType":"472","messageId":"473","endLine":31,"endColumn":92},{"ruleId":"463","severity":1,"message":"464","line":31,"column":117,"nodeType":"465","messageId":"466","endLine":31,"endColumn":119},{"ruleId":"463","severity":1,"message":"464","line":75,"column":56,"nodeType":"465","messageId":"466","endLine":75,"endColumn":58},{"ruleId":"439","severity":1,"message":"440","line":15,"column":15,"nodeType":"441","endLine":57,"endColumn":6},{"ruleId":"421","severity":1,"message":"508","line":23,"column":17,"nodeType":"423","messageId":"424","endLine":23,"endColumn":18},{"ruleId":"439","severity":1,"message":"442","line":57,"column":8,"nodeType":"443","endLine":57,"endColumn":37,"suggestions":"509"},{"ruleId":"421","severity":1,"message":"486","line":1,"column":8,"nodeType":"423","messageId":"424","endLine":1,"endColumn":13},{"ruleId":"421","severity":1,"message":"445","line":2,"column":21,"nodeType":"423","messageId":"424","endLine":2,"endColumn":29},{"ruleId":"439","severity":1,"message":"440","line":13,"column":15,"nodeType":"441","endLine":16,"endColumn":6},{"ruleId":"439","severity":1,"message":"442","line":16,"column":8,"nodeType":"443","endLine":16,"endColumn":10,"suggestions":"510"},{"ruleId":"421","severity":1,"message":"486","line":2,"column":8,"nodeType":"423","messageId":"424","endLine":2,"endColumn":13},{"ruleId":"421","severity":1,"message":"485","line":3,"column":10,"nodeType":"423","messageId":"424","endLine":3,"endColumn":19},{"ruleId":"421","severity":1,"message":"511","line":30,"column":13,"nodeType":"423","messageId":"424","endLine":30,"endColumn":19},{"ruleId":"421","severity":1,"message":"507","line":2,"column":10,"nodeType":"423","messageId":"424","endLine":2,"endColumn":12},{"ruleId":"421","severity":1,"message":"506","line":3,"column":10,"nodeType":"423","messageId":"424","endLine":3,"endColumn":16},{"ruleId":"421","severity":1,"message":"436","line":4,"column":8,"nodeType":"423","messageId":"424","endLine":4,"endColumn":17},{"ruleId":"421","severity":1,"message":"486","line":6,"column":8,"nodeType":"423","messageId":"424","endLine":6,"endColumn":13},{"ruleId":"421","severity":1,"message":"512","line":9,"column":8,"nodeType":"423","messageId":"424","endLine":9,"endColumn":27},{"ruleId":"439","severity":1,"message":"440","line":24,"column":15,"nodeType":"441","endLine":28,"endColumn":6},{"ruleId":"439","severity":1,"message":"442","line":28,"column":8,"nodeType":"443","endLine":28,"endColumn":10,"suggestions":"513"},{"ruleId":"421","severity":1,"message":"514","line":8,"column":9,"nodeType":"423","messageId":"424","endLine":8,"endColumn":14},{"ruleId":"463","severity":1,"message":"464","line":9,"column":32,"nodeType":"465","messageId":"466","endLine":9,"endColumn":34},{"ruleId":"463","severity":1,"message":"464","line":10,"column":35,"nodeType":"465","messageId":"466","endLine":10,"endColumn":37},{"ruleId":"463","severity":1,"message":"464","line":10,"column":70,"nodeType":"465","messageId":"466","endLine":10,"endColumn":72},{"ruleId":"421","severity":1,"message":"515","line":12,"column":9,"nodeType":"423","messageId":"424","endLine":12,"endColumn":19},{"ruleId":"421","severity":1,"message":"516","line":26,"column":9,"nodeType":"423","messageId":"424","endLine":26,"endColumn":17},{"ruleId":"421","severity":1,"message":"511","line":16,"column":9,"nodeType":"423","messageId":"424","endLine":16,"endColumn":15},{"ruleId":"439","severity":1,"message":"440","line":18,"column":15,"nodeType":"441","endLine":28,"endColumn":6},{"ruleId":"439","severity":1,"message":"517","line":28,"column":8,"nodeType":"443","endLine":28,"endColumn":10,"suggestions":"518"},{"ruleId":"439","severity":1,"message":"440","line":7,"column":15,"nodeType":"441","endLine":10,"endColumn":6},{"ruleId":"439","severity":1,"message":"519","line":10,"column":8,"nodeType":"443","endLine":10,"endColumn":10,"suggestions":"520"},{"ruleId":"463","severity":1,"message":"464","line":12,"column":32,"nodeType":"465","messageId":"466","endLine":12,"endColumn":34},{"ruleId":"463","severity":1,"message":"464","line":13,"column":35,"nodeType":"465","messageId":"466","endLine":13,"endColumn":37},{"ruleId":"463","severity":1,"message":"464","line":13,"column":70,"nodeType":"465","messageId":"466","endLine":13,"endColumn":72},{"ruleId":"450","severity":1,"message":"451","line":35,"column":21,"nodeType":"452","endLine":35,"endColumn":39},{"ruleId":"450","severity":1,"message":"451","line":41,"column":25,"nodeType":"452","endLine":41,"endColumn":42},{"ruleId":"425","replacedBy":"521"},{"ruleId":"427","replacedBy":"522"},{"ruleId":"421","severity":1,"message":"485","line":2,"column":10,"nodeType":"423","messageId":"424","endLine":2,"endColumn":19},{"ruleId":"421","severity":1,"message":"436","line":3,"column":8,"nodeType":"423","messageId":"424","endLine":3,"endColumn":17},{"ruleId":"421","severity":1,"message":"523","line":10,"column":10,"nodeType":"423","messageId":"424","endLine":10,"endColumn":15},{"ruleId":"421","severity":1,"message":"524","line":10,"column":17,"nodeType":"423","messageId":"424","endLine":10,"endColumn":25},{"ruleId":"421","severity":1,"message":"525","line":15,"column":9,"nodeType":"423","messageId":"424","endLine":15,"endColumn":21},{"ruleId":"450","severity":1,"message":"451","line":69,"column":13,"nodeType":"452","endLine":69,"endColumn":31},{"ruleId":"421","severity":1,"message":"485","line":2,"column":10,"nodeType":"423","messageId":"424","endLine":2,"endColumn":19},{"ruleId":"421","severity":1,"message":"526","line":8,"column":10,"nodeType":"423","messageId":"424","endLine":8,"endColumn":21},{"ruleId":"421","severity":1,"message":"527","line":8,"column":23,"nodeType":"423","messageId":"424","endLine":8,"endColumn":37},{"ruleId":"463","severity":1,"message":"464","line":11,"column":32,"nodeType":"465","messageId":"466","endLine":11,"endColumn":34},{"ruleId":"463","severity":1,"message":"464","line":12,"column":35,"nodeType":"465","messageId":"466","endLine":12,"endColumn":37},{"ruleId":"463","severity":1,"message":"464","line":12,"column":70,"nodeType":"465","messageId":"466","endLine":12,"endColumn":72},{"ruleId":"450","severity":1,"message":"451","line":40,"column":21,"nodeType":"452","endLine":40,"endColumn":39},{"ruleId":"450","severity":1,"message":"451","line":46,"column":25,"nodeType":"452","endLine":46,"endColumn":42},{"ruleId":"463","severity":1,"message":"464","line":54,"column":86,"nodeType":"465","messageId":"466","endLine":54,"endColumn":88},{"ruleId":"450","severity":1,"message":"451","line":85,"column":21,"nodeType":"452","endLine":85,"endColumn":39},{"ruleId":"450","severity":1,"message":"451","line":91,"column":25,"nodeType":"452","endLine":91,"endColumn":42},{"ruleId":"463","severity":1,"message":"464","line":95,"column":86,"nodeType":"465","messageId":"466","endLine":95,"endColumn":88},{"ruleId":"478","severity":1,"message":"479","line":77,"column":41,"nodeType":"465","messageId":"480","endLine":77,"endColumn":42},{"ruleId":"439","severity":1,"message":"440","line":50,"column":15,"nodeType":"441","endLine":53,"endColumn":6},{"ruleId":"439","severity":1,"message":"476","line":53,"column":8,"nodeType":"443","endLine":53,"endColumn":10,"suggestions":"528"},{"ruleId":"481","severity":1,"message":"482","line":67,"column":65,"nodeType":"441","messageId":"483","endLine":67,"endColumn":67},{"ruleId":"421","severity":1,"message":"507","line":2,"column":10,"nodeType":"423","messageId":"424","endLine":2,"endColumn":12},{"ruleId":"421","severity":1,"message":"506","line":3,"column":10,"nodeType":"423","messageId":"424","endLine":3,"endColumn":16},{"ruleId":"421","severity":1,"message":"436","line":4,"column":8,"nodeType":"423","messageId":"424","endLine":4,"endColumn":17},{"ruleId":"421","severity":1,"message":"485","line":5,"column":10,"nodeType":"423","messageId":"424","endLine":5,"endColumn":19},{"ruleId":"421","severity":1,"message":"445","line":5,"column":21,"nodeType":"423","messageId":"424","endLine":5,"endColumn":29},{"ruleId":"421","severity":1,"message":"486","line":6,"column":8,"nodeType":"423","messageId":"424","endLine":6,"endColumn":13},{"ruleId":"421","severity":1,"message":"529","line":7,"column":10,"nodeType":"423","messageId":"424","endLine":7,"endColumn":23},{"ruleId":"421","severity":1,"message":"530","line":7,"column":25,"nodeType":"423","messageId":"424","endLine":7,"endColumn":39},{"ruleId":"421","severity":1,"message":"531","line":8,"column":10,"nodeType":"423","messageId":"424","endLine":8,"endColumn":17},{"ruleId":"421","severity":1,"message":"512","line":9,"column":8,"nodeType":"423","messageId":"424","endLine":9,"endColumn":27},{"ruleId":"463","severity":1,"message":"464","line":26,"column":47,"nodeType":"465","messageId":"466","endLine":26,"endColumn":49},{"ruleId":"463","severity":1,"message":"464","line":40,"column":81,"nodeType":"465","messageId":"466","endLine":40,"endColumn":83},{"ruleId":"463","severity":1,"message":"464","line":41,"column":85,"nodeType":"465","messageId":"466","endLine":41,"endColumn":87},{"ruleId":"463","severity":1,"message":"464","line":59,"column":62,"nodeType":"465","messageId":"466","endLine":59,"endColumn":64},{"ruleId":"463","severity":1,"message":"464","line":82,"column":62,"nodeType":"465","messageId":"466","endLine":82,"endColumn":64},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["532"],"no-negated-in-lhs",["533"],"'useCallback' is defined but never used.","'Route' is defined but never used.","'Router' is defined but never used.","'withRouter' is defined but never used.","'Auth' is defined but never used.","'Register' is defined but never used.","'Main' is defined but never used.","'Preloader' is defined but never used.","'token' is assigned a value but never used.","'setToken' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["534"],"'useState' is defined but never used.","'CardActions' is defined but never used.","no-func-assign","'AuthForm' is a function.","isAFunction","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'applyMiddleware' is assigned a value but never used.","'LOGIN' is assigned a value but never used.","'SET_USER_ID' is assigned a value but never used.",["532"],["533"],"'NavLink' is defined but never used.","'RegisterForm' is a function.","'req' is assigned a value but never used.",["532"],["533"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'users' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'usersArr' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.",["535"],"React Hook useEffect has a missing dependency: 'props.author'. Either include it or remove the dependency array.",["536"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'Chats' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'seeHistory' is assigned a value but never used.","'rights' is assigned a value but never used.","'AddUsersForm' is defined but never used.","'CreateChanel' is defined but never used.","'Search' is defined but never used.","'group' is assigned a value but never used.","'setGroup' is assigned a value but never used.",["537"],"React Hook useEffect has a missing dependency: 'props.name'. Either include it or remove the dependency array.",["538"],["539"],"'Input' is defined but never used.",["540"],"React Hook useEffect has a missing dependency: 'searched.requestNumber'. Either include it or remove the dependency array.",["541"],"'socket' is defined but never used.","'io' is defined but never used.","'a' is assigned a value but never used.",["542"],["543"],"'chanel' is assigned a value but never used.","'SingleRightSettings' is defined but never used.",["544"],"'popup' is assigned a value but never used.","'createList' is assigned a value but never used.","'sendList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.groupForm', 'props.rightsSetingForm', and 'props.selectedGroup._id'. Either include them or remove the dependency array.",["545"],"React Hook useEffect has missing dependencies: 'props.group._id' and 'props.role'. Either include them or remove the dependency array.",["546"],["532"],["533"],"'allow' is assigned a value but never used.","'setAllow' is assigned a value but never used.","'seeUserslist' is assigned a value but never used.","'simpleRoles' is assigned a value but never used.","'setSimpleRoles' is assigned a value but never used.",["547"],"'SetRightsForm' is defined but never used.","'setSimpleRoles' is defined but never used.","'connect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"548","fix":"549"},{"desc":"548","fix":"550"},{"desc":"551","fix":"552"},{"desc":"553","fix":"554"},{"desc":"555","fix":"556"},{"desc":"555","fix":"557"},{"desc":"551","fix":"558"},{"desc":"559","fix":"560"},{"desc":"561","fix":"562"},{"desc":"548","fix":"563"},{"desc":"548","fix":"564"},{"desc":"565","fix":"566"},{"desc":"567","fix":"568"},{"desc":"551","fix":"569"},"Update the dependencies array to be: [props]",{"range":"570","text":"571"},{"range":"572","text":"571"},"Update the dependencies array to be: [props.author]",{"range":"573","text":"574"},"Update the dependencies array to be: [props, props.selectedGroup]",{"range":"575","text":"576"},"Update the dependencies array to be: [props.match.params.groupId, props.name]",{"range":"577","text":"578"},{"range":"579","text":"578"},{"range":"580","text":"574"},"Update the dependencies array to be: [props.searched, searched.requestNumber]",{"range":"581","text":"582"},"Update the dependencies array to be: [props, props.match.params.chanelId]",{"range":"583","text":"584"},{"range":"585","text":"571"},{"range":"586","text":"571"},"Update the dependencies array to be: [props.groupForm, props.rightsSetingForm, props.selectedGroup._id]",{"range":"587","text":"588"},"Update the dependencies array to be: [props.group._id, props.role]",{"range":"589","text":"590"},{"range":"591","text":"574"},[1018,1020],"[props]",[4654,4656],[1086,1088],"[props.author]",[816,837],"[props, props.selectedGroup]",[1020,1048],"[props.match.params.groupId, props.name]",[1271,1299],[1804,1806],[1983,1999],"[props.searched, searched.requestNumber]",[2659,2688],"[props, props.match.params.chanelId]",[612,614],[1032,1034],[968,970],"[props.groupForm, props.rightsSetingForm, props.selectedGroup._id]",[345,347],"[props.group._id, props.role]",[1681,1683]]